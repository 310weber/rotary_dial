
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000081a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  0000081a  000008ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  008000fa  008000fa  00000968  2**0
                  ALLOC
  3 .eeprom       000000d2  00810000  00810000  00000968  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  00000a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018b  00000000  00000000  00000a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000556  00000000  00000000  00000be5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001ca  00000000  00000000  0000113b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000717  00000000  00000000  00001305  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002dc  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000204  00000000  00000000  00001dc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	8d c1       	rjmp	.+794    	; 0x31e <__vector_1>
   4:	ca c1       	rjmp	.+916    	; 0x39a <__vector_2>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	16 c1       	rjmp	.+556    	; 0x238 <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ea e1       	ldi	r30, 0x1A	; 26
  32:	f8 e0       	ldi	r31, 0x08	; 8
  34:	02 c0       	rjmp	.+4      	; 0x3a <.do_copy_data_start>

00000036 <.do_copy_data_loop>:
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0

0000003a <.do_copy_data_start>:
  3a:	aa 3f       	cpi	r26, 0xFA	; 250
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <.do_copy_data_loop>

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	aa ef       	ldi	r26, 0xFA	; 250
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a7 32       	cpi	r26, 0x27	; 39
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	d8 d2       	rcall	.+1456   	; 0x602 <main>
  52:	e1 c3       	rjmp	.+1986   	; 0x816 <_exit>

00000054 <__bad_interrupt>:
  54:	b1 c1       	rjmp	.+866    	; 0x3b8 <__vector_default>

00000056 <init>:


// Initialization
void init (void)
{
	TIMSK  = (1<<TOIE0);                // Int T0 Overflow enabled
  56:	82 e0       	ldi	r24, 0x02	; 2
  58:	89 bf       	out	0x39, r24	; 57

	TCCR0A = (1<<WGM00) | (1<<WGM01);   // 8Bit PWM; Compare/match output mode configured later
  5a:	23 e0       	ldi	r18, 0x03	; 3
  5c:	2a bd       	out	0x2a, r18	; 42
	TCCR0B = TIMER_PRESCALE_MASK0 & TIMER_CLK_DIV1;
  5e:	81 e0       	ldi	r24, 0x01	; 1
  60:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
  62:	12 be       	out	0x32, r1	; 50
	OCR0A = 0;
  64:	19 bc       	out	0x29, r1	; 41
	
	// Configure I/O pins
	PORTB = 0;	// Reset all outputs. Force PWM output (PB0) to 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	10 82       	st	Z, r1
	DDRB   = (1 << PIN_PWM_OUT) | (1 << PIN_DEBUG);	// PWM output (OC0A pin) [AW] and debug (PB5)
  6c:	81 e2       	ldi	r24, 0x21	; 33
  6e:	87 bb       	out	0x17, r24	; 23
	PORTB  = (1 << PIN_DIAL) | (1 << PIN_PULSE);  // Enable Dial/Pulse pull-up resistors
  70:	96 e0       	ldi	r25, 0x06	; 6
  72:	90 83       	st	Z, r25

	// Disable unused modules to save power
	PRR = (1<<PRTIM1) | (1<<PRUSI) | (1<<PRADC);
  74:	8b e0       	ldi	r24, 0x0B	; 11
  76:	80 bd       	out	0x20, r24	; 32
	ACSR = (1<<ACD);
  78:	80 e8       	ldi	r24, 0x80	; 128
  7a:	88 b9       	out	0x08, r24	; 8

	// Configure pin change interrupt
	MCUCR = (1 << ISC01) | (1 << ISC00);         // [AW] Set INT0 for rising edge detection
  7c:	25 bf       	out	0x35, r18	; 53
	GIMSK = (1 << INT0) | (1 << PCIE);           // [AW] Added INT0
  7e:	80 e6       	ldi	r24, 0x60	; 96
  80:	8b bf       	out	0x3b, r24	; 59
	PCMSK = (1 << PIN_DIAL) | (1 << PIN_PULSE);
  82:	95 bb       	out	0x15, r25	; 21

	// Initialize (global) dial status structure (sDS)
	sDS.iDialedDigit = DIGIT_OFF;
  84:	a5 e0       	ldi	r26, 0x05	; 5
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	fd 01       	movw	r30, r26
  8c:	81 93       	st	Z+, r24

	// Variables to detect special functions (SF)
	// SF dialed by holding rotor for few seconds (beep to indicate that SF activated) before releasing it
	// SF defined as: 1:*; 2:#; 3-9: speed dial; 0: program speed dial number
	sDS.bSF_Selected = false;	// Special Function selected
  8e:	10 82       	st	Z, r1

	// Speed dial stuff
	sDS.iSpeedDialDigitIndex = -1;	// Speed dial digit index
  90:	fd 01       	movw	r30, r26
  92:	32 96       	adiw	r30, 0x02	; 2
  94:	80 83       	st	Z, r24
	sDS.iSpeedDialIndex = -1; // Speed dial digi index (in the SD array)	
  96:	13 96       	adiw	r26, 0x03	; 3
  98:	8c 93       	st	X, r24
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
	for (unsigned char i=0; i<SPEED_DIAL_SIZE; i++)	// Clear selected SD array
	{
		sDS.arSpeedDial[i] = DIGIT_OFF;
  9e:	25 e0       	ldi	r18, 0x05	; 5
  a0:	31 e0       	ldi	r19, 0x01	; 1
  a2:	4f ef       	ldi	r20, 0xFF	; 255
  a4:	f9 01       	movw	r30, r18
  a6:	e8 0f       	add	r30, r24
  a8:	f9 1f       	adc	r31, r25
  aa:	34 96       	adiw	r30, 0x04	; 4
  ac:	40 83       	st	Z, r20
  ae:	01 96       	adiw	r24, 0x01	; 1
	sDS.bSF_Selected = false;	// Special Function selected

	// Speed dial stuff
	sDS.iSpeedDialDigitIndex = -1;	// Speed dial digit index
	sDS.iSpeedDialIndex = -1; // Speed dial digi index (in the SD array)	
	for (unsigned char i=0; i<SPEED_DIAL_SIZE; i++)	// Clear selected SD array
  b0:	8e 31       	cpi	r24, 0x1E	; 30
  b2:	91 05       	cpc	r25, r1
  b4:	b9 f7       	brne	.-18     	; 0xa4 <init+0x4e>
	{
		sDS.arSpeedDial[i] = DIGIT_OFF;
	}

	// Interrupts enabled
	sei();                     	     
  b6:	78 94       	sei
}
  b8:	08 95       	ret

000000ba <EnablePWM>:


// Enable PWM output by configuring compare match mode - non inverting PWM
void EnablePWM (void)
{
	sbi(TCCR0A, COM0A1);
  ba:	ea e4       	ldi	r30, 0x4A	; 74
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	80 83       	st	Z, r24
	cbi(TCCR0A, COM0A0);
  c4:	80 81       	ld	r24, Z
  c6:	8f 7b       	andi	r24, 0xBF	; 191
  c8:	80 83       	st	Z, r24
}
  ca:	08 95       	ret

000000cc <SleepMS>:


// Wait x ms
void SleepMS(unsigned int uiMsec)
{	
	ulDelayCounter = 0;
  cc:	10 92 00 01 	sts	0x0100, r1
  d0:	10 92 01 01 	sts	0x0101, r1
  d4:	10 92 02 01 	sts	0x0102, r1
  d8:	10 92 03 01 	sts	0x0103, r1
	
	set_sleep_mode(SLEEP_MODE_IDLE);		
  dc:	e5 e5       	ldi	r30, 0x55	; 85
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	20 81       	ld	r18, Z
  e2:	27 7e       	andi	r18, 0xE7	; 231
  e4:	20 83       	st	Z, r18
	while(ulDelayCounter <= uiMsec * T0_OVERFLOW_PER_MS)
  e6:	9c 01       	movw	r18, r24
  e8:	22 95       	swap	r18
  ea:	32 95       	swap	r19
  ec:	30 7f       	andi	r19, 0xF0	; 240
  ee:	32 27       	eor	r19, r18
  f0:	20 7f       	andi	r18, 0xF0	; 240
  f2:	32 27       	eor	r19, r18
  f4:	28 1b       	sub	r18, r24
  f6:	39 0b       	sbc	r19, r25
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	80 91 00 01 	lds	r24, 0x0100
 100:	90 91 01 01 	lds	r25, 0x0101
 104:	a0 91 02 01 	lds	r26, 0x0102
 108:	b0 91 03 01 	lds	r27, 0x0103
 10c:	28 17       	cp	r18, r24
 10e:	39 07       	cpc	r19, r25
 110:	4a 07       	cpc	r20, r26
 112:	5b 07       	cpc	r21, r27
 114:	a0 f0       	brcs	.+40     	; 0x13e <SleepMS+0x72>
	{
		sleep_mode();
 116:	80 81       	ld	r24, Z
 118:	80 62       	ori	r24, 0x20	; 32
 11a:	80 83       	st	Z, r24
 11c:	88 95       	sleep
 11e:	80 81       	ld	r24, Z
 120:	8f 7d       	andi	r24, 0xDF	; 223
 122:	80 83       	st	Z, r24
void SleepMS(unsigned int uiMsec)
{	
	ulDelayCounter = 0;
	
	set_sleep_mode(SLEEP_MODE_IDLE);		
	while(ulDelayCounter <= uiMsec * T0_OVERFLOW_PER_MS)
 124:	80 91 00 01 	lds	r24, 0x0100
 128:	90 91 01 01 	lds	r25, 0x0101
 12c:	a0 91 02 01 	lds	r26, 0x0102
 130:	b0 91 03 01 	lds	r27, 0x0103
 134:	28 17       	cp	r18, r24
 136:	39 07       	cpc	r19, r25
 138:	4a 07       	cpc	r20, r26
 13a:	5b 07       	cpc	r21, r27
 13c:	60 f7       	brcc	.-40     	; 0x116 <SleepMS+0x4a>
 13e:	08 95       	ret

00000140 <GenerateDigit>:
}


// Generate DTMF tone, duration x ms
void GenerateDigit (signed char scDigit, unsigned int uiDuarationMS)
{
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	8b 01       	movw	r16, r22
	if (scDigit >= 0 && scDigit <= DIGIT_POUND)
 146:	8c 30       	cpi	r24, 0x0C	; 12
 148:	90 f4       	brcc	.+36     	; 0x16e <GenerateDigit+0x2e>
	{
		// Standard digits 0-9, *, #
		cSWa = auc_frequency[scDigit][0];  
 14a:	e8 2f       	mov	r30, r24
 14c:	ff 27       	eor	r31, r31
 14e:	e7 fd       	sbrc	r30, 7
 150:	f0 95       	com	r31
 152:	ee 0f       	add	r30, r30
 154:	ff 1f       	adc	r31, r31
 156:	e0 52       	subi	r30, 0x20	; 32
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	81 91       	ld	r24, Z+
 15c:	80 93 fa 00 	sts	0x00FA, r24
		cSWb = auc_frequency[scDigit][1]; 
 160:	80 81       	ld	r24, Z
 162:	80 93 fb 00 	sts	0x00FB, r24
		EnablePWM();
 166:	a9 df       	rcall	.-174    	; 0xba <EnablePWM>

		// Wait x ms
		SleepMS(uiDuarationMS);
 168:	c8 01       	movw	r24, r16
 16a:	b0 df       	rcall	.-160    	; 0xcc <SleepMS>
 16c:	51 c0       	rjmp	.+162    	; 0x210 <GenerateDigit+0xd0>
	} 
	else if (scDigit==DIGIT_BEEP)
 16e:	86 3f       	cpi	r24, 0xF6	; 246
 170:	49 f4       	brne	.+18     	; 0x184 <GenerateDigit+0x44>
	{
		// Beep ~1000Hz (66)
		cSWa = 66;  
 172:	82 e4       	ldi	r24, 0x42	; 66
 174:	80 93 fa 00 	sts	0x00FA, r24
		cSWb = 0;
 178:	10 92 fb 00 	sts	0x00FB, r1
		EnablePWM();
 17c:	9e df       	rcall	.-196    	; 0xba <EnablePWM>

		// Wait x ms
		SleepMS(uiDuarationMS);
 17e:	c8 01       	movw	r24, r16
 180:	a5 df       	rcall	.-182    	; 0xcc <SleepMS>
 182:	46 c0       	rjmp	.+140    	; 0x210 <GenerateDigit+0xd0>
	}
	else if (scDigit==DIGIT_BEEP_LOW)
 184:	83 3f       	cpi	r24, 0xF3	; 243
 186:	49 f4       	brne	.+18     	; 0x19a <GenerateDigit+0x5a>
	{
		// Beep ~500Hz (33)
		cSWa = 33;  
 188:	81 e2       	ldi	r24, 0x21	; 33
 18a:	80 93 fa 00 	sts	0x00FA, r24
		cSWb = 0;
 18e:	10 92 fb 00 	sts	0x00FB, r1
		EnablePWM();
 192:	93 df       	rcall	.-218    	; 0xba <EnablePWM>

		// Wait x ms
		SleepMS(uiDuarationMS);
 194:	c8 01       	movw	r24, r16
 196:	9a df       	rcall	.-204    	; 0xcc <SleepMS>
 198:	3b c0       	rjmp	.+118    	; 0x210 <GenerateDigit+0xd0>
	}
	else if (scDigit==DIGIT_TUNE_ASC)
 19a:	85 3f       	cpi	r24, 0xF5	; 245
 19c:	e1 f4       	brne	.+56     	; 0x1d6 <GenerateDigit+0x96>
	{
		cSWa = 34;	// C=523.25Hz  
 19e:	82 e2       	ldi	r24, 0x22	; 34
 1a0:	80 93 fa 00 	sts	0x00FA, r24
		cSWb = 0;
 1a4:	10 92 fb 00 	sts	0x00FB, r1
		EnablePWM();
 1a8:	88 df       	rcall	.-240    	; 0xba <EnablePWM>
		
		SleepMS(uiDuarationMS/3);
 1aa:	c8 01       	movw	r24, r16
 1ac:	63 e0       	ldi	r22, 0x03	; 3
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	ed d2       	rcall	.+1498   	; 0x78c <__udivmodhi4>
 1b2:	16 2f       	mov	r17, r22
 1b4:	07 2f       	mov	r16, r23
 1b6:	86 2f       	mov	r24, r22
 1b8:	97 2f       	mov	r25, r23
 1ba:	88 df       	rcall	.-240    	; 0xcc <SleepMS>
		cSWa = 43;	// E=659.26Hz
 1bc:	8b e2       	ldi	r24, 0x2B	; 43
 1be:	80 93 fa 00 	sts	0x00FA, r24
		SleepMS(uiDuarationMS/3);
 1c2:	81 2f       	mov	r24, r17
 1c4:	90 2f       	mov	r25, r16
 1c6:	82 df       	rcall	.-252    	; 0xcc <SleepMS>
		cSWa = 51;	// G=784Hz
 1c8:	83 e3       	ldi	r24, 0x33	; 51
 1ca:	80 93 fa 00 	sts	0x00FA, r24
		SleepMS(uiDuarationMS/3);
 1ce:	81 2f       	mov	r24, r17
 1d0:	90 2f       	mov	r25, r16
 1d2:	7c df       	rcall	.-264    	; 0xcc <SleepMS>
 1d4:	1d c0       	rjmp	.+58     	; 0x210 <GenerateDigit+0xd0>
	}
	else if (scDigit==DIGIT_TUNE_DESC)
 1d6:	84 3f       	cpi	r24, 0xF4	; 244
 1d8:	d9 f4       	brne	.+54     	; 0x210 <GenerateDigit+0xd0>
	{
		cSWa = 51;	// G=784Hz
 1da:	83 e3       	ldi	r24, 0x33	; 51
 1dc:	80 93 fa 00 	sts	0x00FA, r24
		cSWb = 0;
 1e0:	10 92 fb 00 	sts	0x00FB, r1
		EnablePWM();
 1e4:	6a df       	rcall	.-300    	; 0xba <EnablePWM>

		SleepMS(uiDuarationMS/3);
 1e6:	c8 01       	movw	r24, r16
 1e8:	63 e0       	ldi	r22, 0x03	; 3
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	cf d2       	rcall	.+1438   	; 0x78c <__udivmodhi4>
 1ee:	16 2f       	mov	r17, r22
 1f0:	07 2f       	mov	r16, r23
 1f2:	86 2f       	mov	r24, r22
 1f4:	97 2f       	mov	r25, r23
 1f6:	6a df       	rcall	.-300    	; 0xcc <SleepMS>
		cSWa = 43;	// E=659.26Hz
 1f8:	8b e2       	ldi	r24, 0x2B	; 43
 1fa:	80 93 fa 00 	sts	0x00FA, r24
		SleepMS(uiDuarationMS/3);
 1fe:	81 2f       	mov	r24, r17
 200:	90 2f       	mov	r25, r16
 202:	64 df       	rcall	.-312    	; 0xcc <SleepMS>
		cSWa = 34;	// C=523.25Hz  
 204:	82 e2       	ldi	r24, 0x22	; 34
 206:	80 93 fa 00 	sts	0x00FA, r24
		SleepMS(uiDuarationMS/3);
 20a:	81 2f       	mov	r24, r17
 20c:	90 2f       	mov	r25, r16
 20e:	5e df       	rcall	.-324    	; 0xcc <SleepMS>
	}


	// Stop DTMF transmitting
	// Disable PWM output (compare match mode 0) and force it to 0
	cbi(TCCR0A, COM0A1);
 210:	ea e4       	ldi	r30, 0x4A	; 74
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	8f 77       	andi	r24, 0x7F	; 127
 218:	80 83       	st	Z, r24
	cbi(TCCR0A, COM0A0);
 21a:	80 81       	ld	r24, Z
 21c:	8f 7b       	andi	r24, 0xBF	; 191
 21e:	80 83       	st	Z, r24
	cbi(PORTB, PIN_PWM_OUT);
 220:	e8 e3       	ldi	r30, 0x38	; 56
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	8e 7f       	andi	r24, 0xFE	; 254
 228:	80 83       	st	Z, r24
	cSWa = 0;
 22a:	10 92 fa 00 	sts	0x00FA, r1
	cSWb = 0;
 22e:	10 92 fb 00 	sts	0x00FB, r1
}
 232:	1f 91       	pop	r17
 234:	0f 91       	pop	r16
 236:	08 95       	ret

00000238 <__vector_5>:
}


// Timer overflow interrupt service routine
TIMER_INTERRUPT_HANDLER(SIG_OVERFLOW0)
{ 
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	2f 93       	push	r18
 244:	3f 93       	push	r19
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	af 93       	push	r26
 24c:	bf 93       	push	r27
 24e:	ef 93       	push	r30
 250:	ff 93       	push	r31
	unsigned char ucSinA;
	unsigned char ucSinB;

	// A component (high frequency) is always used
	// move Pointer about step width ahead
	iCurSinValA += cSWa;      
 252:	20 91 fa 00 	lds	r18, 0x00FA
 256:	80 91 fc 00 	lds	r24, 0x00FC
 25a:	90 91 fd 00 	lds	r25, 0x00FD
 25e:	82 0f       	add	r24, r18
 260:	91 1d       	adc	r25, r1
 262:	90 93 fd 00 	sts	0x00FD, r25
 266:	80 93 fc 00 	sts	0x00FC, r24
	// normalize Temp-Pointer 
	unsigned int i_TmpSinValA = (char)(((iCurSinValA + 4) >> 3) & (0x007F)); 
 26a:	e0 91 fc 00 	lds	r30, 0x00FC
 26e:	f0 91 fd 00 	lds	r31, 0x00FD
	ucSinA = auc_SinParam[i_TmpSinValA];
 272:	34 96       	adiw	r30, 0x04	; 4
 274:	f6 95       	lsr	r31
 276:	e7 95       	ror	r30
 278:	f6 95       	lsr	r31
 27a:	e7 95       	ror	r30
 27c:	f6 95       	lsr	r31
 27e:	e7 95       	ror	r30
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	ef 77       	andi	r30, 0x7F	; 127
 284:	f0 70       	andi	r31, 0x00	; 0
 286:	e0 5a       	subi	r30, 0xA0	; 160
 288:	ff 4f       	sbci	r31, 0xFF	; 255
 28a:	30 81       	ld	r19, Z


	//	B component (low frequency) is optional
	if (cSWb > 0)
 28c:	80 91 fb 00 	lds	r24, 0x00FB
 290:	88 23       	and	r24, r24
 292:	11 f4       	brne	.+4      	; 0x298 <__stack+0x39>
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	1d c0       	rjmp	.+58     	; 0x2d2 <__stack+0x73>
	{
		// move Pointer about step width ahead
		iCurSinValB += cSWb;	
 298:	20 91 fb 00 	lds	r18, 0x00FB
 29c:	80 91 fe 00 	lds	r24, 0x00FE
 2a0:	90 91 ff 00 	lds	r25, 0x00FF
 2a4:	82 0f       	add	r24, r18
 2a6:	91 1d       	adc	r25, r1
 2a8:	90 93 ff 00 	sts	0x00FF, r25
 2ac:	80 93 fe 00 	sts	0x00FE, r24
		// normalize Temp-Pointer	
		unsigned int i_TmpSinValB = (char)(((iCurSinValB + 4) >> 3) & (0x007F));		
 2b0:	e0 91 fe 00 	lds	r30, 0x00FE
 2b4:	f0 91 ff 00 	lds	r31, 0x00FF
		ucSinB = auc_SinParam[i_TmpSinValB];
 2b8:	34 96       	adiw	r30, 0x04	; 4
 2ba:	f6 95       	lsr	r31
 2bc:	e7 95       	ror	r30
 2be:	f6 95       	lsr	r31
 2c0:	e7 95       	ror	r30
 2c2:	f6 95       	lsr	r31
 2c4:	e7 95       	ror	r30
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	ef 77       	andi	r30, 0x7F	; 127
 2ca:	f0 70       	andi	r31, 0x00	; 0
 2cc:	e0 5a       	subi	r30, 0xA0	; 160
 2ce:	ff 4f       	sbci	r31, 0xFF	; 255
 2d0:	90 81       	ld	r25, Z
	{
		ucSinB = 0;
	}

	// calculate PWM value: high frequency value + 3/4 low frequency value
	OCR0A = (ucSinA + (ucSinB - (ucSinB >> 2)));
 2d2:	89 2f       	mov	r24, r25
 2d4:	83 0f       	add	r24, r19
 2d6:	96 95       	lsr	r25
 2d8:	96 95       	lsr	r25
 2da:	89 1b       	sub	r24, r25
 2dc:	89 bd       	out	0x29, r24	; 41

	ulDelayCounter++;
 2de:	80 91 00 01 	lds	r24, 0x0100
 2e2:	90 91 01 01 	lds	r25, 0x0101
 2e6:	a0 91 02 01 	lds	r26, 0x0102
 2ea:	b0 91 03 01 	lds	r27, 0x0103
 2ee:	01 96       	adiw	r24, 0x01	; 1
 2f0:	a1 1d       	adc	r26, r1
 2f2:	b1 1d       	adc	r27, r1
 2f4:	80 93 00 01 	sts	0x0100, r24
 2f8:	90 93 01 01 	sts	0x0101, r25
 2fc:	a0 93 02 01 	sts	0x0102, r26
 300:	b0 93 03 01 	sts	0x0103, r27
}
 304:	ff 91       	pop	r31
 306:	ef 91       	pop	r30
 308:	bf 91       	pop	r27
 30a:	af 91       	pop	r26
 30c:	9f 91       	pop	r25
 30e:	8f 91       	pop	r24
 310:	3f 91       	pop	r19
 312:	2f 91       	pop	r18
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <__vector_1>:


// [AW] Handler for external interrupt on INT0 (PB2, pin 7)
ISR(INT0_vect)
{
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	0f 93       	push	r16
 32a:	1f 93       	push	r17
 32c:	2f 93       	push	r18
 32e:	3f 93       	push	r19
 330:	4f 93       	push	r20
 332:	5f 93       	push	r21
 334:	6f 93       	push	r22
 336:	7f 93       	push	r23
 338:	8f 93       	push	r24
 33a:	9f 93       	push	r25
 33c:	af 93       	push	r26
 33e:	bf 93       	push	r27
 340:	ef 93       	push	r30
 342:	ff 93       	push	r31
	if (!bCurDialState)
 344:	80 91 f8 00 	lds	r24, 0x00F8
 348:	88 23       	and	r24, r24
 34a:	a1 f4       	brne	.+40     	; 0x374 <__vector_1+0x56>
	{
	    // Disabling SF detection
		bSF_DetectionActive = false;
 34c:	10 92 04 01 	sts	0x0104, r1

		// A pulse just started
		sbi(PORTB, PIN_DEBUG);        // [AW] set debug pin high when pulse is detected
 350:	08 e3       	ldi	r16, 0x38	; 56
 352:	10 e0       	ldi	r17, 0x00	; 0
 354:	f8 01       	movw	r30, r16
 356:	80 81       	ld	r24, Z
 358:	80 62       	ori	r24, 0x20	; 32
 35a:	80 83       	st	Z, r24
		sDS.iDialedDigit++;
 35c:	e5 e0       	ldi	r30, 0x05	; 5
 35e:	f1 e0       	ldi	r31, 0x01	; 1
 360:	80 81       	ld	r24, Z
 362:	8f 5f       	subi	r24, 0xFF	; 255
 364:	80 83       	st	Z, r24
		SleepMS (50);	// delay 50ms
 366:	82 e3       	ldi	r24, 0x32	; 50
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	b0 de       	rcall	.-672    	; 0xcc <SleepMS>
		cbi(PORTB, PIN_DEBUG);
 36c:	f8 01       	movw	r30, r16
 36e:	80 81       	ld	r24, Z
 370:	8f 7d       	andi	r24, 0xDF	; 223
 372:	80 83       	st	Z, r24
	}
}
 374:	ff 91       	pop	r31
 376:	ef 91       	pop	r30
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	7f 91       	pop	r23
 382:	6f 91       	pop	r22
 384:	5f 91       	pop	r21
 386:	4f 91       	pop	r20
 388:	3f 91       	pop	r19
 38a:	2f 91       	pop	r18
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <__vector_2>:

// [AW] Interrupt handlers updated to new code convention
// Interrupt initiated by pin change on any enabled pin
ISR(PCINT0_vect)
{
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
 3a2:	11 24       	eor	r1, r1
 3a4:	8f 93       	push	r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3a6:	85 e8       	ldi	r24, 0x85	; 133
 3a8:	8a 95       	dec	r24
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <__vector_2+0xe>
	// Do nothing, just wake up MCU
	_delay_us(100);
}
 3ac:	8f 91       	pop	r24
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <__vector_default>:

// [AW] Handler for any unspecified 'bad' interrupts
ISR(BADISR_vect)
{
 3b8:	1f 92       	push	r1
 3ba:	0f 92       	push	r0
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	0f 92       	push	r0
 3c0:	11 24       	eor	r1, r1
 3c2:	8f 93       	push	r24
 3c4:	85 e8       	ldi	r24, 0x85	; 133
 3c6:	8a 95       	dec	r24
 3c8:	f1 f7       	brne	.-4      	; 0x3c6 <__vector_default+0xe>
	// Do nothing, just wake up MCU
	_delay_us(100);
 3ca:	8f 91       	pop	r24
 3cc:	0f 90       	pop	r0
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	0f 90       	pop	r0
 3d2:	1f 90       	pop	r1
 3d4:	18 95       	reti

000003d6 <WriteCurrentSpeedDial>:
}


// Write current speed dial array (from the global strucutre) to the EEPROM
void WriteCurrentSpeedDial(unsigned char iSpeedDialIndex)
{
 3d6:	98 2f       	mov	r25, r24
	if ((iSpeedDialIndex >= 3) && (iSpeedDialIndex <= 9))
 3d8:	83 50       	subi	r24, 0x03	; 3
 3da:	87 30       	cpi	r24, 0x07	; 7
 3dc:	a0 f4       	brcc	.+40     	; 0x406 <WriteCurrentSpeedDial+0x30>
	{
		// If dialed index 3 => using array index 0
		eeprom_update_block (&sDS.arSpeedDial, &EEPROM_SpeedDial[iSpeedDialIndex-3][0], SPEED_DIAL_SIZE);
 3de:	89 2f       	mov	r24, r25
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	bc 01       	movw	r22, r24
 3e4:	62 95       	swap	r22
 3e6:	72 95       	swap	r23
 3e8:	70 7f       	andi	r23, 0xF0	; 240
 3ea:	76 27       	eor	r23, r22
 3ec:	60 7f       	andi	r22, 0xF0	; 240
 3ee:	76 27       	eor	r23, r22
 3f0:	68 1b       	sub	r22, r24
 3f2:	79 0b       	sbc	r23, r25
 3f4:	66 0f       	add	r22, r22
 3f6:	77 1f       	adc	r23, r23
 3f8:	6a 55       	subi	r22, 0x5A	; 90
 3fa:	70 40       	sbci	r23, 0x00	; 0
 3fc:	89 e0       	ldi	r24, 0x09	; 9
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	4e e1       	ldi	r20, 0x1E	; 30
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	e7 d1       	rcall	.+974    	; 0x7d4 <__eeupd_block_tn85>
 406:	08 95       	ret

00000408 <Dial_SpeedDialNumber>:
}


// Dial speed dial number (it erases current SD number in the global structure)
void Dial_SpeedDialNumber (unsigned char iSpeedDialIndex)
{
 408:	0f 93       	push	r16
 40a:	1f 93       	push	r17
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	98 2f       	mov	r25, r24
	if ((iSpeedDialIndex >= 3) && (iSpeedDialIndex <= 9))
 412:	83 50       	subi	r24, 0x03	; 3
 414:	87 30       	cpi	r24, 0x07	; 7
 416:	a8 f5       	brcc	.+106    	; 0x482 <Dial_SpeedDialNumber+0x7a>
	{
		// If dialed index 3 => using array index 0
		eeprom_read_block (&sDS.arSpeedDial, &EEPROM_SpeedDial[iSpeedDialIndex-3][0], SPEED_DIAL_SIZE);
 418:	89 2f       	mov	r24, r25
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	bc 01       	movw	r22, r24
 41e:	62 95       	swap	r22
 420:	72 95       	swap	r23
 422:	70 7f       	andi	r23, 0xF0	; 240
 424:	76 27       	eor	r23, r22
 426:	60 7f       	andi	r22, 0xF0	; 240
 428:	76 27       	eor	r23, r22
 42a:	68 1b       	sub	r22, r24
 42c:	79 0b       	sbc	r23, r25
 42e:	66 0f       	add	r22, r22
 430:	77 1f       	adc	r23, r23
 432:	6a 55       	subi	r22, 0x5A	; 90
 434:	70 40       	sbci	r23, 0x00	; 0
 436:	89 e0       	ldi	r24, 0x09	; 9
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	4e e1       	ldi	r20, 0x1E	; 30
 43c:	50 e0       	ldi	r21, 0x00	; 0
 43e:	ba d1       	rcall	.+884    	; 0x7b4 <__eerd_block_tn85>
 440:	c0 e0       	ldi	r28, 0x00	; 0
 442:	d0 e0       	ldi	r29, 0x00	; 0

		for (unsigned char i=0; i<SPEED_DIAL_SIZE; i++)
		{
			// Dial the number
			// Skip dialing invalid digits
			if ( (sDS.arSpeedDial[i] >= 0) && (sDS.arSpeedDial[i] <= DIGIT_POUND) )
 444:	05 e0       	ldi	r16, 0x05	; 5
 446:	11 e0       	ldi	r17, 0x01	; 1
 448:	f8 01       	movw	r30, r16
 44a:	ec 0f       	add	r30, r28
 44c:	fd 1f       	adc	r31, r29
 44e:	34 96       	adiw	r30, 0x04	; 4
 450:	80 81       	ld	r24, Z
 452:	88 23       	and	r24, r24
 454:	94 f0       	brlt	.+36     	; 0x47a <Dial_SpeedDialNumber+0x72>
 456:	f8 01       	movw	r30, r16
 458:	ec 0f       	add	r30, r28
 45a:	fd 1f       	adc	r31, r29
 45c:	34 96       	adiw	r30, 0x04	; 4
 45e:	80 81       	ld	r24, Z
 460:	8c 30       	cpi	r24, 0x0C	; 12
 462:	5c f4       	brge	.+22     	; 0x47a <Dial_SpeedDialNumber+0x72>
			{
				GenerateDigit(sDS.arSpeedDial[i], DTMF_DURATION_MS);  
 464:	f8 01       	movw	r30, r16
 466:	ec 0f       	add	r30, r28
 468:	fd 1f       	adc	r31, r29
 46a:	34 96       	adiw	r30, 0x04	; 4
 46c:	80 81       	ld	r24, Z
 46e:	64 e6       	ldi	r22, 0x64	; 100
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	66 de       	rcall	.-820    	; 0x140 <GenerateDigit>

				// Pause between DTMF tones
				SleepMS (DTMF_DURATION_MS);    
 474:	84 e6       	ldi	r24, 0x64	; 100
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	29 de       	rcall	.-942    	; 0xcc <SleepMS>
 47a:	21 96       	adiw	r28, 0x01	; 1
	if ((iSpeedDialIndex >= 3) && (iSpeedDialIndex <= 9))
	{
		// If dialed index 3 => using array index 0
		eeprom_read_block (&sDS.arSpeedDial, &EEPROM_SpeedDial[iSpeedDialIndex-3][0], SPEED_DIAL_SIZE);

		for (unsigned char i=0; i<SPEED_DIAL_SIZE; i++)
 47c:	ce 31       	cpi	r28, 0x1E	; 30
 47e:	d1 05       	cpc	r29, r1
 480:	19 f7       	brne	.-58     	; 0x448 <Dial_SpeedDialNumber+0x40>
				// Pause between DTMF tones
				SleepMS (DTMF_DURATION_MS);    
			}
		}
	}
}
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	1f 91       	pop	r17
 488:	0f 91       	pop	r16
 48a:	08 95       	ret

0000048c <ProcessDialedDigit>:



// Processing dialed digit
void ProcessDialedDigit (void)
{
 48c:	0f 93       	push	r16
 48e:	1f 93       	push	r17
	// Special functions 1 and 2 (* and #)
	if (sDS.bSF_Selected && (sDS.iDialedDigit == 1))				
 490:	80 91 06 01 	lds	r24, 0x0106
 494:	88 23       	and	r24, r24
 496:	41 f0       	breq	.+16     	; 0x4a8 <ProcessDialedDigit+0x1c>
 498:	80 91 05 01 	lds	r24, 0x0105
 49c:	81 30       	cpi	r24, 0x01	; 1
 49e:	21 f4       	brne	.+8      	; 0x4a8 <ProcessDialedDigit+0x1c>
	{
		// SF 1-*
		sDS.iDialedDigit = DIGIT_STAR;
 4a0:	8a e0       	ldi	r24, 0x0A	; 10
 4a2:	80 93 05 01 	sts	0x0105, r24
 4a6:	0b c0       	rjmp	.+22     	; 0x4be <ProcessDialedDigit+0x32>
	}
	else if (sDS.bSF_Selected && (sDS.iDialedDigit == 2))
 4a8:	80 91 06 01 	lds	r24, 0x0106
 4ac:	88 23       	and	r24, r24
 4ae:	39 f0       	breq	.+14     	; 0x4be <ProcessDialedDigit+0x32>
 4b0:	80 91 05 01 	lds	r24, 0x0105
 4b4:	82 30       	cpi	r24, 0x02	; 2
 4b6:	19 f4       	brne	.+6      	; 0x4be <ProcessDialedDigit+0x32>
	{
		// SF 2-#
		sDS.iDialedDigit = DIGIT_POUND;
 4b8:	8b e0       	ldi	r24, 0x0B	; 11
 4ba:	80 93 05 01 	sts	0x0105, r24
	}

	// Speed dial functionality - entering and leaving SD mode
	if (sDS.bSF_Selected && (sDS.iDialedDigit == 0))
 4be:	80 91 06 01 	lds	r24, 0x0106
 4c2:	88 23       	and	r24, r24
 4c4:	a9 f1       	breq	.+106    	; 0x530 <ProcessDialedDigit+0xa4>
 4c6:	80 91 05 01 	lds	r24, 0x0105
 4ca:	88 23       	and	r24, r24
 4cc:	89 f5       	brne	.+98     	; 0x530 <ProcessDialedDigit+0xa4>
	{
		// SF 0 - write speed dial

		// SP programming already in progress?
		if (sDS.iSpeedDialDigitIndex < 0)
 4ce:	80 91 07 01 	lds	r24, 0x0107
 4d2:	88 23       	and	r24, r24
 4d4:	e4 f4       	brge	.+56     	; 0x50e <ProcessDialedDigit+0x82>
		{
			// Just entered SD mode						
			sDS.iSpeedDialDigitIndex = 0;
 4d6:	e7 e0       	ldi	r30, 0x07	; 7
 4d8:	f1 e0       	ldi	r31, 0x01	; 1
 4da:	11 92       	st	Z+, r1

			// At this point we don't know SD index yet
			sDS.iSpeedDialIndex = -1;
 4dc:	8f ef       	ldi	r24, 0xFF	; 255
 4de:	80 83       	st	Z, r24
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	90 e0       	ldi	r25, 0x00	; 0

			// Clear selected SD array
			for (unsigned char i=0; i<SPEED_DIAL_SIZE; i++)
			{
				sDS.arSpeedDial[i] = DIGIT_OFF;
 4e4:	25 e0       	ldi	r18, 0x05	; 5
 4e6:	31 e0       	ldi	r19, 0x01	; 1
 4e8:	4f ef       	ldi	r20, 0xFF	; 255
 4ea:	f9 01       	movw	r30, r18
 4ec:	e8 0f       	add	r30, r24
 4ee:	f9 1f       	adc	r31, r25
 4f0:	34 96       	adiw	r30, 0x04	; 4
 4f2:	40 83       	st	Z, r20
 4f4:	01 96       	adiw	r24, 0x01	; 1

			// At this point we don't know SD index yet
			sDS.iSpeedDialIndex = -1;

			// Clear selected SD array
			for (unsigned char i=0; i<SPEED_DIAL_SIZE; i++)
 4f6:	8e 31       	cpi	r24, 0x1E	; 30
 4f8:	91 05       	cpc	r25, r1
 4fa:	b9 f7       	brne	.-18     	; 0x4ea <ProcessDialedDigit+0x5e>
			{
				sDS.arSpeedDial[i] = DIGIT_OFF;
			}

			// Beep upon entering SD mode, user has to enter SD index
			GenerateDigit (DIGIT_TUNE_ASC, 700);
 4fc:	85 ef       	ldi	r24, 0xF5	; 245
 4fe:	6c eb       	ldi	r22, 0xBC	; 188
 500:	72 e0       	ldi	r23, 0x02	; 2
 502:	1e de       	rcall	.-964    	; 0x140 <GenerateDigit>
			GenerateDigit (DIGIT_TUNE_DESC, 700);
 504:	84 ef       	ldi	r24, 0xF4	; 244
 506:	6c eb       	ldi	r22, 0xBC	; 188
 508:	72 e0       	ldi	r23, 0x02	; 2
 50a:	1a de       	rcall	.-972    	; 0x140 <GenerateDigit>
 50c:	77 c0       	rjmp	.+238    	; 0x5fc <ProcessDialedDigit+0x170>
		else
		{
			// SD in progress and user entered SF 0 - save SD and exit SD mode
		
			// Save speed dial number
			WriteCurrentSpeedDial(sDS.iSpeedDialIndex);
 50e:	08 e0       	ldi	r16, 0x08	; 8
 510:	11 e0       	ldi	r17, 0x01	; 1
 512:	f8 01       	movw	r30, r16
 514:	80 81       	ld	r24, Z
 516:	5f df       	rcall	.-322    	; 0x3d6 <WriteCurrentSpeedDial>

			// Leave SD mode
			sDS.iSpeedDialIndex = -1;
 518:	8f ef       	ldi	r24, 0xFF	; 255
 51a:	f8 01       	movw	r30, r16
 51c:	80 83       	st	Z, r24
			sDS.iSpeedDialDigitIndex = -1;
 51e:	01 50       	subi	r16, 0x01	; 1
 520:	10 40       	sbci	r17, 0x00	; 0
 522:	f8 01       	movw	r30, r16
 524:	80 83       	st	Z, r24

			// Beep to indicate that we done
			GenerateDigit (DIGIT_TUNE_DESC, 800);
 526:	84 ef       	ldi	r24, 0xF4	; 244
 528:	60 e2       	ldi	r22, 0x20	; 32
 52a:	73 e0       	ldi	r23, 0x03	; 3
 52c:	09 de       	rcall	.-1006   	; 0x140 <GenerateDigit>
 52e:	66 c0       	rjmp	.+204    	; 0x5fc <ProcessDialedDigit+0x170>
		}
	}
	// Programming SD number
	else if (sDS.iSpeedDialDigitIndex >= 0)
 530:	80 91 07 01 	lds	r24, 0x0107
 534:	88 23       	and	r24, r24
 536:	0c f4       	brge	.+2      	; 0x53a <ProcessDialedDigit+0xae>
 538:	4c c0       	rjmp	.+152    	; 0x5d2 <ProcessDialedDigit+0x146>
	{
		// First digit dialed after selecting SD mode. SD index not set yet
		if (sDS.iSpeedDialIndex < 0)
 53a:	80 91 08 01 	lds	r24, 0x0108
 53e:	88 23       	and	r24, r24
 540:	ec f4       	brge	.+58     	; 0x57c <ProcessDialedDigit+0xf0>
		{
			// SD index supposed to be between 3 and 9
			if ((sDS.iDialedDigit >= 3) && (sDS.iDialedDigit <= 9))
 542:	80 91 05 01 	lds	r24, 0x0105
 546:	83 30       	cpi	r24, 0x03	; 3
 548:	74 f0       	brlt	.+28     	; 0x566 <ProcessDialedDigit+0xda>
 54a:	80 91 05 01 	lds	r24, 0x0105
 54e:	8a 30       	cpi	r24, 0x0A	; 10
 550:	54 f4       	brge	.+20     	; 0x566 <ProcessDialedDigit+0xda>
			{
				sDS.iSpeedDialIndex = sDS.iDialedDigit;
 552:	e5 e0       	ldi	r30, 0x05	; 5
 554:	f1 e0       	ldi	r31, 0x01	; 1
 556:	80 81       	ld	r24, Z
 558:	33 96       	adiw	r30, 0x03	; 3
 55a:	80 83       	st	Z, r24
			
				// Beep to indicate that we are in the SD mode
				GenerateDigit (DIGIT_TUNE_ASC, 800);
 55c:	85 ef       	ldi	r24, 0xF5	; 245
 55e:	60 e2       	ldi	r22, 0x20	; 32
 560:	73 e0       	ldi	r23, 0x03	; 3
 562:	ee dd       	rcall	.-1060   	; 0x140 <GenerateDigit>
 564:	4b c0       	rjmp	.+150    	; 0x5fc <ProcessDialedDigit+0x170>
			else
			{
				// Wrong SD index - beep and exit SD mode
			
				// Leave SD mode
				sDS.iSpeedDialIndex = -1;
 566:	e8 e0       	ldi	r30, 0x08	; 8
 568:	f1 e0       	ldi	r31, 0x01	; 1
 56a:	8f ef       	ldi	r24, 0xFF	; 255
 56c:	80 83       	st	Z, r24
				sDS.iSpeedDialDigitIndex = -1;
 56e:	31 97       	sbiw	r30, 0x01	; 1
 570:	80 83       	st	Z, r24
			
				// Long Beep to indicate error
				GenerateDigit (DIGIT_BEEP, 1000);
 572:	86 ef       	ldi	r24, 0xF6	; 246
 574:	68 ee       	ldi	r22, 0xE8	; 232
 576:	73 e0       	ldi	r23, 0x03	; 3
 578:	e3 dd       	rcall	.-1082   	; 0x140 <GenerateDigit>
 57a:	40 c0       	rjmp	.+128    	; 0x5fc <ProcessDialedDigit+0x170>
		else
		{
			// Programming SD already in progress

			// Do we have too many digits entered?
			if (sDS.iSpeedDialDigitIndex >= SPEED_DIAL_SIZE)
 57c:	80 91 07 01 	lds	r24, 0x0107
 580:	8e 31       	cpi	r24, 0x1E	; 30
 582:	8c f0       	brlt	.+34     	; 0x5a6 <ProcessDialedDigit+0x11a>
			{
				// YES - finish and save speed dial number

				// Save speed dial number
				WriteCurrentSpeedDial(sDS.iSpeedDialIndex);
 584:	08 e0       	ldi	r16, 0x08	; 8
 586:	11 e0       	ldi	r17, 0x01	; 1
 588:	f8 01       	movw	r30, r16
 58a:	80 81       	ld	r24, Z
 58c:	24 df       	rcall	.-440    	; 0x3d6 <WriteCurrentSpeedDial>

				// Leave SD mode
				sDS.iSpeedDialIndex = -1;
 58e:	8f ef       	ldi	r24, 0xFF	; 255
 590:	f8 01       	movw	r30, r16
 592:	80 83       	st	Z, r24
				sDS.iSpeedDialDigitIndex = -1;
 594:	01 50       	subi	r16, 0x01	; 1
 596:	10 40       	sbci	r17, 0x00	; 0
 598:	f8 01       	movw	r30, r16
 59a:	80 83       	st	Z, r24

				// Beep to indicate that we done
				GenerateDigit (DIGIT_TUNE_DESC, 800);
 59c:	84 ef       	ldi	r24, 0xF4	; 244
 59e:	60 e2       	ldi	r22, 0x20	; 32
 5a0:	73 e0       	ldi	r23, 0x03	; 3
 5a2:	ce dd       	rcall	.-1124   	; 0x140 <GenerateDigit>
 5a4:	2b c0       	rjmp	.+86     	; 0x5fc <ProcessDialedDigit+0x170>
			} 
			else
			{
				// All good - set new digit to the array
				sDS.arSpeedDial[sDS.iSpeedDialDigitIndex] = sDS.iDialedDigit;
 5a6:	07 e0       	ldi	r16, 0x07	; 7
 5a8:	11 e0       	ldi	r17, 0x01	; 1
 5aa:	f8 01       	movw	r30, r16
 5ac:	80 81       	ld	r24, Z
 5ae:	99 27       	eor	r25, r25
 5b0:	87 fd       	sbrc	r24, 7
 5b2:	90 95       	com	r25
 5b4:	32 97       	sbiw	r30, 0x02	; 2
 5b6:	20 81       	ld	r18, Z
 5b8:	e8 0f       	add	r30, r24
 5ba:	f9 1f       	adc	r31, r25
 5bc:	34 96       	adiw	r30, 0x04	; 4
 5be:	20 83       	st	Z, r18

				// Generic beep - do not gererate DTMF code
				GenerateDigit(DIGIT_BEEP_LOW, DTMF_DURATION_MS);
 5c0:	83 ef       	ldi	r24, 0xF3	; 243
 5c2:	64 e6       	ldi	r22, 0x64	; 100
 5c4:	70 e0       	ldi	r23, 0x00	; 0
 5c6:	bc dd       	rcall	.-1160   	; 0x140 <GenerateDigit>

				// Next digit
				sDS.iSpeedDialDigitIndex++;
 5c8:	f8 01       	movw	r30, r16
 5ca:	80 81       	ld	r24, Z
 5cc:	8f 5f       	subi	r24, 0xFF	; 255
 5ce:	80 83       	st	Z, r24
 5d0:	15 c0       	rjmp	.+42     	; 0x5fc <ProcessDialedDigit+0x170>
			}
		}
	}
	// Call SD stored number
	else if (sDS.bSF_Selected && (sDS.iDialedDigit >= 3) && (sDS.iDialedDigit <= 9))
 5d2:	80 91 06 01 	lds	r24, 0x0106
 5d6:	88 23       	and	r24, r24
 5d8:	61 f0       	breq	.+24     	; 0x5f2 <ProcessDialedDigit+0x166>
 5da:	80 91 05 01 	lds	r24, 0x0105
 5de:	83 30       	cpi	r24, 0x03	; 3
 5e0:	44 f0       	brlt	.+16     	; 0x5f2 <ProcessDialedDigit+0x166>
 5e2:	80 91 05 01 	lds	r24, 0x0105
 5e6:	8a 30       	cpi	r24, 0x0A	; 10
 5e8:	24 f4       	brge	.+8      	; 0x5f2 <ProcessDialedDigit+0x166>
	{
		// SF 3-9 -> Call speed dial number
		Dial_SpeedDialNumber(sDS.iDialedDigit);
 5ea:	80 91 05 01 	lds	r24, 0x0105
 5ee:	0c df       	rcall	.-488    	; 0x408 <Dial_SpeedDialNumber>
 5f0:	05 c0       	rjmp	.+10     	; 0x5fc <ProcessDialedDigit+0x170>
	// Standard (non speed dial functionality)
	else
	{
		// Standard (no speed dial, no special function) mode
		// Generate DTMF code
		GenerateDigit(sDS.iDialedDigit, DTMF_DURATION_MS);  
 5f2:	80 91 05 01 	lds	r24, 0x0105
 5f6:	64 e6       	ldi	r22, 0x64	; 100
 5f8:	70 e0       	ldi	r23, 0x00	; 0
 5fa:	a2 dd       	rcall	.-1212   	; 0x140 <GenerateDigit>
	}
}
 5fc:	1f 91       	pop	r17
 5fe:	0f 91       	pop	r16
 600:	08 95       	ret

00000602 <main>:
volatile type_DialStatus sDS;	// Global dial status structure


//----- BEGIN MAIN ------------------------------------------------------------
int main(void)
{
 602:	4f 92       	push	r4
 604:	5f 92       	push	r5
 606:	6f 92       	push	r6
 608:	7f 92       	push	r7
 60a:	8f 92       	push	r8
 60c:	9f 92       	push	r9
 60e:	af 92       	push	r10
 610:	bf 92       	push	r11
 612:	cf 92       	push	r12
 614:	df 92       	push	r13
 616:	ef 92       	push	r14
 618:	ff 92       	push	r15
 61a:	0f 93       	push	r16
 61c:	1f 93       	push	r17
 61e:	df 93       	push	r29
 620:	cf 93       	push	r28
 622:	00 d0       	rcall	.+0      	; 0x624 <main+0x22>
 624:	0f 92       	push	r0
 626:	cd b7       	in	r28, 0x3d	; 61
 628:	de b7       	in	r29, 0x3e	; 62
	// Program clock prescaller to divide +frequency by 1
	// Write CLKPCE 1 and other bits 0	
	CLKPR = (1<<CLKPCE);	
 62a:	e6 e4       	ldi	r30, 0x46	; 70
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	80 e8       	ldi	r24, 0x80	; 128
 630:	80 83       	st	Z, r24
	// Write prescaler value with CLKPCE = 0
	CLKPR = 0x00;
 632:	10 82       	st	Z, r1

	// Initialize I/O and global variables
	init();
 634:	10 dd       	rcall	.-1504   	; 0x56 <init>

	// Turn PWM OFF
	GenerateDigit(DIGIT_OFF, 0); 
 636:	8f ef       	ldi	r24, 0xFF	; 255
 638:	60 e0       	ldi	r22, 0x00	; 0
 63a:	70 e0       	ldi	r23, 0x00	; 0
 63c:	81 dd       	rcall	.-1278   	; 0x140 <GenerateDigit>

	// Local dial status variables 
	volatile bool bPrevDialState = true;		// Rotor status
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	89 83       	std	Y+1, r24	; 0x01
	volatile bool bPrevPulseState = false;	// Rotor pulse status
 642:	1a 82       	std	Y+2, r1	; 0x02
	volatile bool bCurPulseState = false;	// Rotor pulse status
 644:	1b 82       	std	Y+3, r1	; 0x03


	// Main loop
  	while (1)
	{ 
		bCurDialState = bit_is_set (PINB, PIN_DIAL);
 646:	0f 2e       	mov	r0, r31
 648:	f6 e3       	ldi	r31, 0x36	; 54
 64a:	af 2e       	mov	r10, r31
 64c:	bb 24       	eor	r11, r11
 64e:	f0 2d       	mov	r31, r0
			{
				// Disabling SF detection (should be already disabled)
				bSF_DetectionActive = false;

				// Check that we detect a valid digit
				if ((sDS.iDialedDigit <= 0) || (sDS.iDialedDigit > 10))
 650:	0f 2e       	mov	r0, r31
 652:	f5 e0       	ldi	r31, 0x05	; 5
 654:	ef 2e       	mov	r14, r31
 656:	f1 e0       	ldi	r31, 0x01	; 1
 658:	ff 2e       	mov	r15, r31
 65a:	f0 2d       	mov	r31, r0
					}

					ProcessDialedDigit();
				}
					
				sDS.bSF_Selected = false;	// Reset SF flag
 65c:	0f 2e       	mov	r0, r31
 65e:	f6 e0       	ldi	r31, 0x06	; 6
 660:	cf 2e       	mov	r12, r31
 662:	f1 e0       	ldi	r31, 0x01	; 1
 664:	df 2e       	mov	r13, r31
 666:	f0 2d       	mov	r31, r0

				// Check that we detect a valid digit
				if ((sDS.iDialedDigit <= 0) || (sDS.iDialedDigit > 10))
				{
					// Should never happen - no pulses detected OR count more than 10 pulses
					sDS.iDialedDigit = DIGIT_OFF;					
 668:	55 24       	eor	r5, r5
 66a:	5a 94       	dec	r5
		{
			if (!bCurDialState) 
			{
				// Dial just started
				// Enabling special function detection
				bSF_DetectionActive = true;
 66c:	44 24       	eor	r4, r4
 66e:	43 94       	inc	r4
				sDS.bSF_Selected = false;

				sDS.iDialedDigit = 0;
 670:	46 01       	movw	r8, r12
 672:	08 94       	sec
 674:	81 08       	sbc	r8, r1
 676:	91 08       	sbc	r9, r1
				SleepMS (50);	// Delay 50ms
				cbi(PORTB, PIN_DEBUG);        // [AW] clear debug pin at start of pulse count
 678:	0f 2e       	mov	r0, r31
 67a:	f8 e3       	ldi	r31, 0x38	; 56
 67c:	6f 2e       	mov	r6, r31
 67e:	77 24       	eor	r7, r7
 680:	f0 2d       	mov	r31, r0
			}
		}
		else
		{
			// Don't need timer - sleep to power down mode
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 682:	05 e5       	ldi	r16, 0x55	; 85
 684:	10 e0       	ldi	r17, 0x00	; 0


	// Main loop
  	while (1)
	{ 
		bCurDialState = bit_is_set (PINB, PIN_DIAL);
 686:	f5 01       	movw	r30, r10
 688:	80 81       	ld	r24, Z
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	96 95       	lsr	r25
 68e:	87 95       	ror	r24
 690:	81 70       	andi	r24, 0x01	; 1
 692:	80 93 f8 00 	sts	0x00F8, r24
		bCurPulseState = bit_is_set (PINB, PIN_PULSE);
 696:	80 81       	ld	r24, Z
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	96 95       	lsr	r25
 69c:	87 95       	ror	r24
 69e:	96 95       	lsr	r25
 6a0:	87 95       	ror	r24
 6a2:	81 70       	andi	r24, 0x01	; 1
 6a4:	8b 83       	std	Y+3, r24	; 0x03


		if (bPrevDialState != bCurDialState) 
 6a6:	99 81       	ldd	r25, Y+1	; 0x01
 6a8:	80 91 f8 00 	lds	r24, 0x00F8
 6ac:	98 17       	cp	r25, r24
 6ae:	51 f1       	breq	.+84     	; 0x704 <main+0x102>
		{
			if (!bCurDialState) 
 6b0:	80 91 f8 00 	lds	r24, 0x00F8
 6b4:	88 23       	and	r24, r24
 6b6:	71 f4       	brne	.+28     	; 0x6d4 <main+0xd2>
			{
				// Dial just started
				// Enabling special function detection
				bSF_DetectionActive = true;
 6b8:	40 92 04 01 	sts	0x0104, r4
				sDS.bSF_Selected = false;
 6bc:	f6 01       	movw	r30, r12
 6be:	10 82       	st	Z, r1

				sDS.iDialedDigit = 0;
 6c0:	f4 01       	movw	r30, r8
 6c2:	10 82       	st	Z, r1
				SleepMS (50);	// Delay 50ms
 6c4:	82 e3       	ldi	r24, 0x32	; 50
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	01 dd       	rcall	.-1534   	; 0xcc <SleepMS>
				cbi(PORTB, PIN_DEBUG);        // [AW] clear debug pin at start of pulse count
 6ca:	f3 01       	movw	r30, r6
 6cc:	80 81       	ld	r24, Z
 6ce:	8f 7d       	andi	r24, 0xDF	; 223
 6d0:	80 83       	st	Z, r24
 6d2:	22 c0       	rjmp	.+68     	; 0x718 <main+0x116>
			} 
			else 
			{
				// Disabling SF detection (should be already disabled)
				bSF_DetectionActive = false;
 6d4:	10 92 04 01 	sts	0x0104, r1

				// Check that we detect a valid digit
				if ((sDS.iDialedDigit <= 0) || (sDS.iDialedDigit > 10))
 6d8:	f7 01       	movw	r30, r14
 6da:	80 81       	ld	r24, Z
 6dc:	18 16       	cp	r1, r24
 6de:	1c f4       	brge	.+6      	; 0x6e6 <main+0xe4>
 6e0:	80 81       	ld	r24, Z
 6e2:	8b 30       	cpi	r24, 0x0B	; 11
 6e4:	34 f0       	brlt	.+12     	; 0x6f2 <main+0xf0>
				{
					// Should never happen - no pulses detected OR count more than 10 pulses
					sDS.iDialedDigit = DIGIT_OFF;					
 6e6:	f7 01       	movw	r30, r14
 6e8:	50 82       	st	Z, r5

					// Do nothing
					SleepMS (50);	// Delay 50ms
 6ea:	82 e3       	ldi	r24, 0x32	; 50
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	ee dc       	rcall	.-1572   	; 0xcc <SleepMS>
 6f0:	06 c0       	rjmp	.+12     	; 0x6fe <main+0xfc>
				}
				else 
				{
					// Got a valid digit - process it			
					if (sDS.iDialedDigit == 10)
 6f2:	f7 01       	movw	r30, r14
 6f4:	80 81       	ld	r24, Z
 6f6:	8a 30       	cpi	r24, 0x0A	; 10
 6f8:	09 f4       	brne	.+2      	; 0x6fc <main+0xfa>
					{
						// 10 pulses => 0
						sDS.iDialedDigit = 0;
 6fa:	10 82       	st	Z, r1
					}

					ProcessDialedDigit();
 6fc:	c7 de       	rcall	.-626    	; 0x48c <ProcessDialedDigit>
				}
					
				sDS.bSF_Selected = false;	// Reset SF flag
 6fe:	f6 01       	movw	r30, r12
 700:	10 82       	st	Z, r1
 702:	0a c0       	rjmp	.+20     	; 0x718 <main+0x116>
			}	
		} 
		else 
		{
			if (!bCurDialState) 
 704:	80 91 f8 00 	lds	r24, 0x00F8
 708:	88 23       	and	r24, r24
 70a:	31 f0       	breq	.+12     	; 0x718 <main+0x116>
			}
			else
			{
				// Rotary dial at the rest position
				// Reset all variables
				bSF_DetectionActive = false;
 70c:	10 92 04 01 	sts	0x0104, r1
				sDS.bSF_Selected = false;
 710:	f6 01       	movw	r30, r12
 712:	10 82       	st	Z, r1
				sDS.iDialedDigit = DIGIT_OFF;
 714:	f4 01       	movw	r30, r8
 716:	50 82       	st	Z, r5
			}
		}

		bPrevDialState = bCurDialState;
 718:	80 91 f8 00 	lds	r24, 0x00F8
 71c:	89 83       	std	Y+1, r24	; 0x01
		bPrevPulseState = bCurPulseState;
 71e:	8b 81       	ldd	r24, Y+3	; 0x03
 720:	8a 83       	std	Y+2, r24	; 0x02

		// Don't power down if special function detection is active		
		if (bSF_DetectionActive)
 722:	80 91 04 01 	lds	r24, 0x0104
 726:	88 23       	and	r24, r24
 728:	19 f1       	breq	.+70     	; 0x770 <main+0x16e>
		{
			// SF detection in progress - we need timer to run (IDLE mode)
			set_sleep_mode(SLEEP_MODE_IDLE);		
 72a:	f8 01       	movw	r30, r16
 72c:	80 81       	ld	r24, Z
 72e:	87 7e       	andi	r24, 0xE7	; 231
 730:	80 83       	st	Z, r24
			sleep_mode();
 732:	80 81       	ld	r24, Z
 734:	80 62       	ori	r24, 0x20	; 32
 736:	80 83       	st	Z, r24
 738:	88 95       	sleep
 73a:	f8 01       	movw	r30, r16
 73c:	80 81       	ld	r24, Z
 73e:	8f 7d       	andi	r24, 0xDF	; 223
 740:	80 83       	st	Z, r24

			// Special function mode detected?
			if (ulDelayCounter >= SF_DELAY_MS * T0_OVERFLOW_PER_MS)
 742:	80 91 00 01 	lds	r24, 0x0100
 746:	90 91 01 01 	lds	r25, 0x0101
 74a:	a0 91 02 01 	lds	r26, 0x0102
 74e:	b0 91 03 01 	lds	r27, 0x0103
 752:	80 53       	subi	r24, 0x30	; 48
 754:	95 47       	sbci	r25, 0x75	; 117
 756:	a0 40       	sbci	r26, 0x00	; 0
 758:	b0 40       	sbci	r27, 0x00	; 0
 75a:	08 f4       	brcc	.+2      	; 0x75e <main+0x15c>
 75c:	94 cf       	rjmp	.-216    	; 0x686 <main+0x84>
			{
				// SF mode detected
				sDS.bSF_Selected = true;
 75e:	f6 01       	movw	r30, r12
 760:	40 82       	st	Z, r4
				bSF_DetectionActive = false;
 762:	10 92 04 01 	sts	0x0104, r1

				// Indicate that we entered SF mode wit short beep
				GenerateDigit (DIGIT_BEEP, 200);
 766:	86 ef       	ldi	r24, 0xF6	; 246
 768:	68 ec       	ldi	r22, 0xC8	; 200
 76a:	70 e0       	ldi	r23, 0x00	; 0
 76c:	e9 dc       	rcall	.-1582   	; 0x140 <GenerateDigit>
 76e:	8b cf       	rjmp	.-234    	; 0x686 <main+0x84>
			}
		}
		else
		{
			// Don't need timer - sleep to power down mode
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 770:	f8 01       	movw	r30, r16
 772:	80 81       	ld	r24, Z
 774:	87 7e       	andi	r24, 0xE7	; 231
 776:	80 61       	ori	r24, 0x10	; 16
 778:	80 83       	st	Z, r24
			sleep_mode();
 77a:	80 81       	ld	r24, Z
 77c:	80 62       	ori	r24, 0x20	; 32
 77e:	80 83       	st	Z, r24
 780:	88 95       	sleep
 782:	f8 01       	movw	r30, r16
 784:	80 81       	ld	r24, Z
 786:	8f 7d       	andi	r24, 0xDF	; 223
 788:	80 83       	st	Z, r24
 78a:	7d cf       	rjmp	.-262    	; 0x686 <main+0x84>

0000078c <__udivmodhi4>:
 78c:	aa 1b       	sub	r26, r26
 78e:	bb 1b       	sub	r27, r27
 790:	51 e1       	ldi	r21, 0x11	; 17
 792:	07 c0       	rjmp	.+14     	; 0x7a2 <__udivmodhi4_ep>

00000794 <__udivmodhi4_loop>:
 794:	aa 1f       	adc	r26, r26
 796:	bb 1f       	adc	r27, r27
 798:	a6 17       	cp	r26, r22
 79a:	b7 07       	cpc	r27, r23
 79c:	10 f0       	brcs	.+4      	; 0x7a2 <__udivmodhi4_ep>
 79e:	a6 1b       	sub	r26, r22
 7a0:	b7 0b       	sbc	r27, r23

000007a2 <__udivmodhi4_ep>:
 7a2:	88 1f       	adc	r24, r24
 7a4:	99 1f       	adc	r25, r25
 7a6:	5a 95       	dec	r21
 7a8:	a9 f7       	brne	.-22     	; 0x794 <__udivmodhi4_loop>
 7aa:	80 95       	com	r24
 7ac:	90 95       	com	r25
 7ae:	bc 01       	movw	r22, r24
 7b0:	cd 01       	movw	r24, r26
 7b2:	08 95       	ret

000007b4 <__eerd_block_tn85>:
 7b4:	dc 01       	movw	r26, r24
 7b6:	cb 01       	movw	r24, r22

000007b8 <__eerd_blraw_tn85>:
 7b8:	fc 01       	movw	r30, r24
 7ba:	e1 99       	sbic	0x1c, 1	; 28
 7bc:	fe cf       	rjmp	.-4      	; 0x7ba <__eerd_blraw_tn85+0x2>
 7be:	06 c0       	rjmp	.+12     	; 0x7cc <__eerd_blraw_tn85+0x14>
 7c0:	ff bb       	out	0x1f, r31	; 31
 7c2:	ee bb       	out	0x1e, r30	; 30
 7c4:	e0 9a       	sbi	0x1c, 0	; 28
 7c6:	31 96       	adiw	r30, 0x01	; 1
 7c8:	0d b2       	in	r0, 0x1d	; 29
 7ca:	0d 92       	st	X+, r0
 7cc:	41 50       	subi	r20, 0x01	; 1
 7ce:	50 40       	sbci	r21, 0x00	; 0
 7d0:	b8 f7       	brcc	.-18     	; 0x7c0 <__eerd_blraw_tn85+0x8>
 7d2:	08 95       	ret

000007d4 <__eeupd_block_tn85>:
 7d4:	dc 01       	movw	r26, r24
 7d6:	a4 0f       	add	r26, r20
 7d8:	b5 1f       	adc	r27, r21
 7da:	41 50       	subi	r20, 0x01	; 1
 7dc:	50 40       	sbci	r21, 0x00	; 0
 7de:	40 f0       	brcs	.+16     	; 0x7f0 <__eeupd_block_tn85+0x1c>
 7e0:	cb 01       	movw	r24, r22
 7e2:	84 0f       	add	r24, r20
 7e4:	95 1f       	adc	r25, r21
 7e6:	2e 91       	ld	r18, -X
 7e8:	05 d0       	rcall	.+10     	; 0x7f4 <__eeupd_r18_tn85>
 7ea:	41 50       	subi	r20, 0x01	; 1
 7ec:	50 40       	sbci	r21, 0x00	; 0
 7ee:	d8 f7       	brcc	.-10     	; 0x7e6 <__eeupd_block_tn85+0x12>
 7f0:	08 95       	ret

000007f2 <__eeupd_byte_tn85>:
 7f2:	26 2f       	mov	r18, r22

000007f4 <__eeupd_r18_tn85>:
 7f4:	e1 99       	sbic	0x1c, 1	; 28
 7f6:	fe cf       	rjmp	.-4      	; 0x7f4 <__eeupd_r18_tn85>
 7f8:	9f bb       	out	0x1f, r25	; 31
 7fa:	8e bb       	out	0x1e, r24	; 30
 7fc:	e0 9a       	sbi	0x1c, 0	; 28
 7fe:	01 97       	sbiw	r24, 0x01	; 1
 800:	0d b2       	in	r0, 0x1d	; 29
 802:	02 16       	cp	r0, r18
 804:	39 f0       	breq	.+14     	; 0x814 <__eeupd_r18_tn85+0x20>
 806:	1c ba       	out	0x1c, r1	; 28
 808:	2d bb       	out	0x1d, r18	; 29
 80a:	0f b6       	in	r0, 0x3f	; 63
 80c:	f8 94       	cli
 80e:	e2 9a       	sbi	0x1c, 2	; 28
 810:	e1 9a       	sbi	0x1c, 1	; 28
 812:	0f be       	out	0x3f, r0	; 63
 814:	08 95       	ret

00000816 <_exit>:
 816:	f8 94       	cli

00000818 <__stop_program>:
 818:	ff cf       	rjmp	.-2      	; 0x818 <__stop_program>
