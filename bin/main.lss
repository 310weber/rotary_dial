
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000706  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  00000706  000007ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  008000fa  008000fa  00000854  2**0
                  ALLOC
  3 .eeprom       000000d2  00810000  00810000  00000854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000009cc  00000000  00000000  00000928  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000e5  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  000013d9  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000020  00000000  00000000  000013ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000892  00000000  00000000  0000140a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000026c  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000206  00000000  00000000  00001f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000190  00000000  00000000  00002110  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000369  00000000  00000000  000022a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000587  00000000  00000000  00002609  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	ff c2       	rjmp	.+1534   	; 0x602 <__vector_1>
   4:	19 c3       	rjmp	.+1586   	; 0x638 <__vector_2>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	89 c2       	rjmp	.+1298   	; 0x51e <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e6 e0       	ldi	r30, 0x06	; 6
  32:	f7 e0       	ldi	r31, 0x07	; 7
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	aa 3f       	cpi	r26, 0xFA	; 250
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	aa ef       	ldi	r26, 0xFA	; 250
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a7 32       	cpi	r26, 0x27	; 39
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	d3 d1       	rcall	.+934    	; 0x3f8 <main>
  52:	57 c3       	rjmp	.+1710   	; 0x702 <_exit>

00000054 <__bad_interrupt>:
  54:	01 c3       	rjmp	.+1538   	; 0x658 <__vector_default>

00000056 <init>:


// Initialization
void init (void)
{
	TIMSK  = (1<<TOIE0);                // Int T0 Overflow enabled
  56:	82 e0       	ldi	r24, 0x02	; 2
  58:	89 bf       	out	0x39, r24	; 57

	TCCR0A = (1<<WGM00) | (1<<WGM01);   // 8Bit PWM; Compare/match output mode configured later
  5a:	93 e0       	ldi	r25, 0x03	; 3
  5c:	9a bd       	out	0x2a, r25	; 42
	TCCR0B = TIMER_PRESCALE_MASK0 & TIMER_CLK_DIV1;
  5e:	91 e0       	ldi	r25, 0x01	; 1
  60:	93 bf       	out	0x33, r25	; 51
	TCNT0 = 0;
  62:	12 be       	out	0x32, r1	; 50
	OCR0A = 0;
  64:	19 bc       	out	0x29, r1	; 41
	
	// Configure I/O pins
	PORTB = 0;	// Reset all outputs. Force PWM output (PB0) to 0
  66:	18 ba       	out	0x18, r1	; 24
	DDRB   = (1 << PIN_PWM_OUT);	// PWM output (OC0A pin)
  68:	97 bb       	out	0x17, r25	; 23
	PORTB  = 0;  // [AW] Disable Pull-ups - external HW debounce
  6a:	18 ba       	out	0x18, r1	; 24

	// Disable unused modules to save power
	PRR = (1<<PRTIM1) | (1<<PRUSI) | (1<<PRADC);
  6c:	9b e0       	ldi	r25, 0x0B	; 11
  6e:	90 bd       	out	0x20, r25	; 32
	ACSR = (1<<ACD);
  70:	90 e8       	ldi	r25, 0x80	; 128
  72:	98 b9       	out	0x08, r25	; 8

	// Configure pin change interrupt
	MCUCR = (1 << ISC01) | (0 << ISC00);         // [AW] Set INT0 for falling edge detection
  74:	85 bf       	out	0x35, r24	; 53
	GIMSK = (1 << INT0) | (1 << PCIE);           // [AW] Added INT0
  76:	80 e6       	ldi	r24, 0x60	; 96
  78:	8b bf       	out	0x3b, r24	; 59
	PCMSK = (1 << PIN_DIAL) | (1 << PIN_PULSE);
  7a:	86 e0       	ldi	r24, 0x06	; 6
  7c:	85 bb       	out	0x15, r24	; 21

	// Initialize (global) dial status structure (sDS)
	sDS.iDialedDigit = DIGIT_OFF;
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	80 93 05 01 	sts	0x0105, r24

	// Variables to detect special functions (SF)
	// SF dialed by holding rotor for few seconds (beep to indicate that SF activated) before releasing it
	// SF defined as: 1:*; 2:#; 3-9: speed dial; 0: program speed dial number
	sDS.bSF_Selected = false;	// Special Function selected
  84:	10 92 06 01 	sts	0x0106, r1

	// Speed dial stuff
	sDS.iSpeedDialDigitIndex = -1;	// Speed dial digit index
  88:	80 93 07 01 	sts	0x0107, r24
	sDS.iSpeedDialIndex = -1; // Speed dial digi index (in the SD array)	
  8c:	80 93 08 01 	sts	0x0108, r24
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	90 e0       	ldi	r25, 0x00	; 0
	for (unsigned char i=0; i<SPEED_DIAL_SIZE; i++)	// Clear selected SD array
	{
		sDS.arSpeedDial[i] = DIGIT_OFF;
  94:	2f ef       	ldi	r18, 0xFF	; 255
  96:	fc 01       	movw	r30, r24
  98:	eb 5f       	subi	r30, 0xFB	; 251
  9a:	fe 4f       	sbci	r31, 0xFE	; 254
  9c:	24 83       	std	Z+4, r18	; 0x04
  9e:	01 96       	adiw	r24, 0x01	; 1
	sDS.bSF_Selected = false;	// Special Function selected

	// Speed dial stuff
	sDS.iSpeedDialDigitIndex = -1;	// Speed dial digit index
	sDS.iSpeedDialIndex = -1; // Speed dial digi index (in the SD array)	
	for (unsigned char i=0; i<SPEED_DIAL_SIZE; i++)	// Clear selected SD array
  a0:	8e 31       	cpi	r24, 0x1E	; 30
  a2:	91 05       	cpc	r25, r1
  a4:	c1 f7       	brne	.-16     	; 0x96 <init+0x40>
	{
		sDS.arSpeedDial[i] = DIGIT_OFF;
	}

	// Interrupts enabled
	sei();                     	     
  a6:	78 94       	sei
  a8:	08 95       	ret

000000aa <EnablePWM>:


// Enable PWM output by configuring compare match mode - non inverting PWM
void EnablePWM (void)
{
	sbi(TCCR0A, COM0A1);
  aa:	8a b5       	in	r24, 0x2a	; 42
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	8a bd       	out	0x2a, r24	; 42
	cbi(TCCR0A, COM0A0);
  b0:	8a b5       	in	r24, 0x2a	; 42
  b2:	8f 7b       	andi	r24, 0xBF	; 191
  b4:	8a bd       	out	0x2a, r24	; 42
  b6:	08 95       	ret

000000b8 <SleepMS>:


// Wait x ms
void SleepMS(unsigned int uiMsec)
{	
	ulDelayCounter = 0;
  b8:	10 92 fb 00 	sts	0x00FB, r1
  bc:	10 92 fc 00 	sts	0x00FC, r1
  c0:	10 92 fd 00 	sts	0x00FD, r1
  c4:	10 92 fe 00 	sts	0x00FE, r1
	
	set_sleep_mode(SLEEP_MODE_IDLE);		
  c8:	25 b7       	in	r18, 0x35	; 53
  ca:	27 7e       	andi	r18, 0xE7	; 231
  cc:	25 bf       	out	0x35, r18	; 53
	while(ulDelayCounter <= uiMsec * T0_OVERFLOW_PER_MS)
  ce:	ac 01       	movw	r20, r24
  d0:	42 95       	swap	r20
  d2:	52 95       	swap	r21
  d4:	50 7f       	andi	r21, 0xF0	; 240
  d6:	54 27       	eor	r21, r20
  d8:	40 7f       	andi	r20, 0xF0	; 240
  da:	54 27       	eor	r21, r20
  dc:	48 1b       	sub	r20, r24
  de:	59 0b       	sbc	r21, r25
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	80 91 fb 00 	lds	r24, 0x00FB
  e8:	90 91 fc 00 	lds	r25, 0x00FC
  ec:	a0 91 fd 00 	lds	r26, 0x00FD
  f0:	b0 91 fe 00 	lds	r27, 0x00FE
  f4:	48 17       	cp	r20, r24
  f6:	59 07       	cpc	r21, r25
  f8:	6a 07       	cpc	r22, r26
  fa:	7b 07       	cpc	r23, r27
  fc:	a0 f0       	brcs	.+40     	; 0x126 <SleepMS+0x6e>
	{
		sleep_mode();
  fe:	85 b7       	in	r24, 0x35	; 53
 100:	80 62       	ori	r24, 0x20	; 32
 102:	85 bf       	out	0x35, r24	; 53
 104:	88 95       	sleep
 106:	85 b7       	in	r24, 0x35	; 53
 108:	8f 7d       	andi	r24, 0xDF	; 223
 10a:	85 bf       	out	0x35, r24	; 53
void SleepMS(unsigned int uiMsec)
{	
	ulDelayCounter = 0;
	
	set_sleep_mode(SLEEP_MODE_IDLE);		
	while(ulDelayCounter <= uiMsec * T0_OVERFLOW_PER_MS)
 10c:	80 91 fb 00 	lds	r24, 0x00FB
 110:	90 91 fc 00 	lds	r25, 0x00FC
 114:	a0 91 fd 00 	lds	r26, 0x00FD
 118:	b0 91 fe 00 	lds	r27, 0x00FE
 11c:	48 17       	cp	r20, r24
 11e:	59 07       	cpc	r21, r25
 120:	6a 07       	cpc	r22, r26
 122:	7b 07       	cpc	r23, r27
 124:	60 f7       	brcc	.-40     	; 0xfe <SleepMS+0x46>
 126:	08 95       	ret

00000128 <GenerateDigit>:
}


// Generate DTMF tone, duration x ms
void GenerateDigit (signed char scDigit, unsigned int uiDuarationMS)
{
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	eb 01       	movw	r28, r22
	if (scDigit >= 0 && scDigit <= DIGIT_POUND)
 12e:	8c 30       	cpi	r24, 0x0C	; 12
 130:	78 f4       	brcc	.+30     	; 0x150 <GenerateDigit+0x28>
	{
		// Standard digits 0-9, *, #
		cSWa = auc_frequency[scDigit][0];  
 132:	e8 2f       	mov	r30, r24
 134:	ee 0f       	add	r30, r30
 136:	ff 0b       	sbc	r31, r31
 138:	ef 59       	subi	r30, 0x9F	; 159
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	80 81       	ld	r24, Z
 13e:	80 93 04 01 	sts	0x0104, r24
		cSWb = auc_frequency[scDigit][1]; 
 142:	81 81       	ldd	r24, Z+1	; 0x01
 144:	80 93 03 01 	sts	0x0103, r24
		EnablePWM();
 148:	b0 df       	rcall	.-160    	; 0xaa <EnablePWM>

		// Wait x ms
		SleepMS(uiDuarationMS);
 14a:	ce 01       	movw	r24, r28
 14c:	b5 df       	rcall	.-150    	; 0xb8 <SleepMS>
 14e:	49 c0       	rjmp	.+146    	; 0x1e2 <GenerateDigit+0xba>
	} 
	else if (scDigit==DIGIT_BEEP)
 150:	86 3f       	cpi	r24, 0xF6	; 246
 152:	49 f4       	brne	.+18     	; 0x166 <GenerateDigit+0x3e>
	{
		// Beep ~1000Hz (66)
		cSWa = 66;  
 154:	82 e4       	ldi	r24, 0x42	; 66
 156:	80 93 04 01 	sts	0x0104, r24
		cSWb = 0;
 15a:	10 92 03 01 	sts	0x0103, r1
		EnablePWM();
 15e:	a5 df       	rcall	.-182    	; 0xaa <EnablePWM>

		// Wait x ms
		SleepMS(uiDuarationMS);
 160:	ce 01       	movw	r24, r28
 162:	aa df       	rcall	.-172    	; 0xb8 <SleepMS>
 164:	3e c0       	rjmp	.+124    	; 0x1e2 <GenerateDigit+0xba>
	}
	else if (scDigit==DIGIT_BEEP_LOW)
 166:	83 3f       	cpi	r24, 0xF3	; 243
 168:	49 f4       	brne	.+18     	; 0x17c <GenerateDigit+0x54>
	{
		// Beep ~500Hz (33)
		cSWa = 33;  
 16a:	81 e2       	ldi	r24, 0x21	; 33
 16c:	80 93 04 01 	sts	0x0104, r24
		cSWb = 0;
 170:	10 92 03 01 	sts	0x0103, r1
		EnablePWM();
 174:	9a df       	rcall	.-204    	; 0xaa <EnablePWM>

		// Wait x ms
		SleepMS(uiDuarationMS);
 176:	ce 01       	movw	r24, r28
 178:	9f df       	rcall	.-194    	; 0xb8 <SleepMS>
 17a:	33 c0       	rjmp	.+102    	; 0x1e2 <GenerateDigit+0xba>
	}
	else if (scDigit==DIGIT_TUNE_ASC)
 17c:	85 3f       	cpi	r24, 0xF5	; 245
 17e:	c1 f4       	brne	.+48     	; 0x1b0 <GenerateDigit+0x88>
	{
		cSWa = 34;	// C=523.25Hz  
 180:	82 e2       	ldi	r24, 0x22	; 34
 182:	80 93 04 01 	sts	0x0104, r24
		cSWb = 0;
 186:	10 92 03 01 	sts	0x0103, r1
		EnablePWM();
 18a:	8f df       	rcall	.-226    	; 0xaa <EnablePWM>
		
		SleepMS(uiDuarationMS/3);
 18c:	ce 01       	movw	r24, r28
 18e:	63 e0       	ldi	r22, 0x03	; 3
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	72 d2       	rcall	.+1252   	; 0x678 <__udivmodhi4>
 194:	eb 01       	movw	r28, r22
 196:	cb 01       	movw	r24, r22
 198:	8f df       	rcall	.-226    	; 0xb8 <SleepMS>
		cSWa = 43;	// E=659.26Hz
 19a:	8b e2       	ldi	r24, 0x2B	; 43
 19c:	80 93 04 01 	sts	0x0104, r24
		SleepMS(uiDuarationMS/3);
 1a0:	ce 01       	movw	r24, r28
 1a2:	8a df       	rcall	.-236    	; 0xb8 <SleepMS>
		cSWa = 51;	// G=784Hz
 1a4:	83 e3       	ldi	r24, 0x33	; 51
 1a6:	80 93 04 01 	sts	0x0104, r24
		SleepMS(uiDuarationMS/3);
 1aa:	ce 01       	movw	r24, r28
 1ac:	85 df       	rcall	.-246    	; 0xb8 <SleepMS>
 1ae:	19 c0       	rjmp	.+50     	; 0x1e2 <GenerateDigit+0xba>
	}
	else if (scDigit==DIGIT_TUNE_DESC)
 1b0:	84 3f       	cpi	r24, 0xF4	; 244
 1b2:	b9 f4       	brne	.+46     	; 0x1e2 <GenerateDigit+0xba>
	{
		cSWa = 51;	// G=784Hz
 1b4:	83 e3       	ldi	r24, 0x33	; 51
 1b6:	80 93 04 01 	sts	0x0104, r24
		cSWb = 0;
 1ba:	10 92 03 01 	sts	0x0103, r1
		EnablePWM();
 1be:	75 df       	rcall	.-278    	; 0xaa <EnablePWM>

		SleepMS(uiDuarationMS/3);
 1c0:	ce 01       	movw	r24, r28
 1c2:	63 e0       	ldi	r22, 0x03	; 3
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	58 d2       	rcall	.+1200   	; 0x678 <__udivmodhi4>
 1c8:	eb 01       	movw	r28, r22
 1ca:	cb 01       	movw	r24, r22
 1cc:	75 df       	rcall	.-278    	; 0xb8 <SleepMS>
		cSWa = 43;	// E=659.26Hz
 1ce:	8b e2       	ldi	r24, 0x2B	; 43
 1d0:	80 93 04 01 	sts	0x0104, r24
		SleepMS(uiDuarationMS/3);
 1d4:	ce 01       	movw	r24, r28
 1d6:	70 df       	rcall	.-288    	; 0xb8 <SleepMS>
		cSWa = 34;	// C=523.25Hz  
 1d8:	82 e2       	ldi	r24, 0x22	; 34
 1da:	80 93 04 01 	sts	0x0104, r24
		SleepMS(uiDuarationMS/3);
 1de:	ce 01       	movw	r24, r28
 1e0:	6b df       	rcall	.-298    	; 0xb8 <SleepMS>
	}


	// Stop DTMF transmitting
	// Disable PWM output (compare match mode 0) and force it to 0
	cbi(TCCR0A, COM0A1);
 1e2:	8a b5       	in	r24, 0x2a	; 42
 1e4:	8f 77       	andi	r24, 0x7F	; 127
 1e6:	8a bd       	out	0x2a, r24	; 42
	cbi(TCCR0A, COM0A0);
 1e8:	8a b5       	in	r24, 0x2a	; 42
 1ea:	8f 7b       	andi	r24, 0xBF	; 191
 1ec:	8a bd       	out	0x2a, r24	; 42
	cbi(PORTB, PIN_PWM_OUT);
 1ee:	c0 98       	cbi	0x18, 0	; 24
	cSWa = 0;
 1f0:	10 92 04 01 	sts	0x0104, r1
	cSWb = 0;
 1f4:	10 92 03 01 	sts	0x0103, r1
}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <Dial_SpeedDialNumber>:
}


// Dial speed dial number (it erases current SD number in the global structure)
void Dial_SpeedDialNumber (unsigned char iSpeedDialIndex)
{
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
	if ((iSpeedDialIndex >= 3) && (iSpeedDialIndex <= 9))
 202:	9d ef       	ldi	r25, 0xFD	; 253
 204:	98 0f       	add	r25, r24
 206:	97 30       	cpi	r25, 0x07	; 7
 208:	80 f5       	brcc	.+96     	; 0x26a <__stack+0xb>
	{
		// If dialed index 3 => using array index 0
		eeprom_read_block (&sDS.arSpeedDial, &EEPROM_SpeedDial[iSpeedDialIndex-3][0], SPEED_DIAL_SIZE);
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	03 97       	sbiw	r24, 0x03	; 3
 20e:	bc 01       	movw	r22, r24
 210:	62 95       	swap	r22
 212:	72 95       	swap	r23
 214:	70 7f       	andi	r23, 0xF0	; 240
 216:	76 27       	eor	r23, r22
 218:	60 7f       	andi	r22, 0xF0	; 240
 21a:	76 27       	eor	r23, r22
 21c:	68 1b       	sub	r22, r24
 21e:	79 0b       	sbc	r23, r25
 220:	66 0f       	add	r22, r22
 222:	77 1f       	adc	r23, r23
 224:	60 50       	subi	r22, 0x00	; 0
 226:	70 40       	sbci	r23, 0x00	; 0
 228:	4e e1       	ldi	r20, 0x1E	; 30
 22a:	50 e0       	ldi	r21, 0x00	; 0
 22c:	89 e0       	ldi	r24, 0x09	; 9
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	37 d2       	rcall	.+1134   	; 0x6a0 <__eerd_block_tn85>
 232:	c0 e0       	ldi	r28, 0x00	; 0
 234:	d0 e0       	ldi	r29, 0x00	; 0

		for (unsigned char i=0; i<SPEED_DIAL_SIZE; i++)
		{
			// Dial the number
			// Skip dialing invalid digits
			if ( (sDS.arSpeedDial[i] >= 0) && (sDS.arSpeedDial[i] <= DIGIT_POUND) )
 236:	fe 01       	movw	r30, r28
 238:	eb 5f       	subi	r30, 0xFB	; 251
 23a:	fe 4f       	sbci	r31, 0xFE	; 254
 23c:	24 81       	ldd	r18, Z+4	; 0x04
 23e:	22 23       	and	r18, r18
 240:	84 f0       	brlt	.+32     	; 0x262 <__stack+0x3>
 242:	fe 01       	movw	r30, r28
 244:	eb 5f       	subi	r30, 0xFB	; 251
 246:	fe 4f       	sbci	r31, 0xFE	; 254
 248:	24 81       	ldd	r18, Z+4	; 0x04
 24a:	2c 30       	cpi	r18, 0x0C	; 12
 24c:	54 f4       	brge	.+20     	; 0x262 <__stack+0x3>
			{
				GenerateDigit(sDS.arSpeedDial[i], DTMF_DURATION_MS);  
 24e:	fe 01       	movw	r30, r28
 250:	eb 5f       	subi	r30, 0xFB	; 251
 252:	fe 4f       	sbci	r31, 0xFE	; 254
 254:	84 81       	ldd	r24, Z+4	; 0x04
 256:	64 e6       	ldi	r22, 0x64	; 100
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	66 df       	rcall	.-308    	; 0x128 <GenerateDigit>

				// Pause between DTMF tones
				SleepMS (DTMF_DURATION_MS);    
 25c:	84 e6       	ldi	r24, 0x64	; 100
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	2b df       	rcall	.-426    	; 0xb8 <SleepMS>
 262:	21 96       	adiw	r28, 0x01	; 1
	if ((iSpeedDialIndex >= 3) && (iSpeedDialIndex <= 9))
	{
		// If dialed index 3 => using array index 0
		eeprom_read_block (&sDS.arSpeedDial, &EEPROM_SpeedDial[iSpeedDialIndex-3][0], SPEED_DIAL_SIZE);

		for (unsigned char i=0; i<SPEED_DIAL_SIZE; i++)
 264:	ce 31       	cpi	r28, 0x1E	; 30
 266:	d1 05       	cpc	r29, r1
 268:	31 f7       	brne	.-52     	; 0x236 <Dial_SpeedDialNumber+0x38>
				// Pause between DTMF tones
				SleepMS (DTMF_DURATION_MS);    
			}
		}
	}
}
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <WriteCurrentSpeedDial>:


// Write current speed dial array (from the global structure) to the EEPROM
void WriteCurrentSpeedDial(unsigned char iSpeedDialIndex)
{
	if ((iSpeedDialIndex >= 3) && (iSpeedDialIndex <= 9))
 270:	9d ef       	ldi	r25, 0xFD	; 253
 272:	98 0f       	add	r25, r24
 274:	97 30       	cpi	r25, 0x07	; 7
 276:	a0 f4       	brcc	.+40     	; 0x2a0 <WriteCurrentSpeedDial+0x30>
	{
		// If dialed index 3 => using array index 0
		eeprom_update_block (&sDS.arSpeedDial, &EEPROM_SpeedDial[iSpeedDialIndex-3][0], SPEED_DIAL_SIZE);
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	03 97       	sbiw	r24, 0x03	; 3
 27c:	bc 01       	movw	r22, r24
 27e:	62 95       	swap	r22
 280:	72 95       	swap	r23
 282:	70 7f       	andi	r23, 0xF0	; 240
 284:	76 27       	eor	r23, r22
 286:	60 7f       	andi	r22, 0xF0	; 240
 288:	76 27       	eor	r23, r22
 28a:	68 1b       	sub	r22, r24
 28c:	79 0b       	sbc	r23, r25
 28e:	66 0f       	add	r22, r22
 290:	77 1f       	adc	r23, r23
 292:	60 50       	subi	r22, 0x00	; 0
 294:	70 40       	sbci	r23, 0x00	; 0
 296:	4e e1       	ldi	r20, 0x1E	; 30
 298:	50 e0       	ldi	r21, 0x00	; 0
 29a:	89 e0       	ldi	r24, 0x09	; 9
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	10 d2       	rcall	.+1056   	; 0x6c0 <__eeupd_block_tn85>
 2a0:	08 95       	ret

000002a2 <ProcessDialedDigit>:



// Processing dialed digit
void ProcessDialedDigit (void)
{
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
	// Special functions 1 and 2 (* and #)
	if (sDS.bSF_Selected && (sDS.iDialedDigit == 1))				
 2a6:	80 91 06 01 	lds	r24, 0x0106
 2aa:	88 23       	and	r24, r24
 2ac:	41 f0       	breq	.+16     	; 0x2be <ProcessDialedDigit+0x1c>
 2ae:	80 91 05 01 	lds	r24, 0x0105
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	21 f4       	brne	.+8      	; 0x2be <ProcessDialedDigit+0x1c>
	{
		// SF 1-*
		sDS.iDialedDigit = DIGIT_STAR;
 2b6:	8a e0       	ldi	r24, 0x0A	; 10
 2b8:	80 93 05 01 	sts	0x0105, r24
 2bc:	0b c0       	rjmp	.+22     	; 0x2d4 <ProcessDialedDigit+0x32>
	}
	else if (sDS.bSF_Selected && (sDS.iDialedDigit == 2))
 2be:	80 91 06 01 	lds	r24, 0x0106
 2c2:	88 23       	and	r24, r24
 2c4:	39 f0       	breq	.+14     	; 0x2d4 <ProcessDialedDigit+0x32>
 2c6:	80 91 05 01 	lds	r24, 0x0105
 2ca:	82 30       	cpi	r24, 0x02	; 2
 2cc:	19 f4       	brne	.+6      	; 0x2d4 <ProcessDialedDigit+0x32>
	{
		// SF 2-#
		sDS.iDialedDigit = DIGIT_POUND;
 2ce:	8b e0       	ldi	r24, 0x0B	; 11
 2d0:	80 93 05 01 	sts	0x0105, r24
	}

	// Speed dial functionality - entering and leaving SD mode
	if (sDS.bSF_Selected && (sDS.iDialedDigit == 0))
 2d4:	80 91 06 01 	lds	r24, 0x0106
 2d8:	88 23       	and	r24, r24
 2da:	71 f1       	breq	.+92     	; 0x338 <ProcessDialedDigit+0x96>
 2dc:	80 91 05 01 	lds	r24, 0x0105
 2e0:	81 11       	cpse	r24, r1
 2e2:	2a c0       	rjmp	.+84     	; 0x338 <ProcessDialedDigit+0x96>
	{
		// SF 0 - write speed dial

		// SP programming already in progress?
		if (sDS.iSpeedDialDigitIndex < 0)
 2e4:	80 91 07 01 	lds	r24, 0x0107
 2e8:	88 23       	and	r24, r24
 2ea:	cc f4       	brge	.+50     	; 0x31e <ProcessDialedDigit+0x7c>
		{
			// Just entered SD mode						
			sDS.iSpeedDialDigitIndex = 0;
 2ec:	10 92 07 01 	sts	0x0107, r1

			// At this point we don't know SD index yet
			sDS.iSpeedDialIndex = -1;
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	80 93 08 01 	sts	0x0108, r24
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0

			// Clear selected SD array
			for (unsigned char i=0; i<SPEED_DIAL_SIZE; i++)
			{
				sDS.arSpeedDial[i] = DIGIT_OFF;
 2fa:	2f ef       	ldi	r18, 0xFF	; 255
 2fc:	fc 01       	movw	r30, r24
 2fe:	eb 5f       	subi	r30, 0xFB	; 251
 300:	fe 4f       	sbci	r31, 0xFE	; 254
 302:	24 83       	std	Z+4, r18	; 0x04
 304:	01 96       	adiw	r24, 0x01	; 1

			// At this point we don't know SD index yet
			sDS.iSpeedDialIndex = -1;

			// Clear selected SD array
			for (unsigned char i=0; i<SPEED_DIAL_SIZE; i++)
 306:	8e 31       	cpi	r24, 0x1E	; 30
 308:	91 05       	cpc	r25, r1
 30a:	c1 f7       	brne	.-16     	; 0x2fc <ProcessDialedDigit+0x5a>
			{
				sDS.arSpeedDial[i] = DIGIT_OFF;
			}

			// Beep upon entering SD mode, user has to enter SD index
			GenerateDigit (DIGIT_TUNE_ASC, 700);
 30c:	6c eb       	ldi	r22, 0xBC	; 188
 30e:	72 e0       	ldi	r23, 0x02	; 2
 310:	85 ef       	ldi	r24, 0xF5	; 245
 312:	0a df       	rcall	.-492    	; 0x128 <GenerateDigit>
			GenerateDigit (DIGIT_TUNE_DESC, 700);
 314:	6c eb       	ldi	r22, 0xBC	; 188
 316:	72 e0       	ldi	r23, 0x02	; 2
 318:	84 ef       	ldi	r24, 0xF4	; 244
 31a:	06 df       	rcall	.-500    	; 0x128 <GenerateDigit>
 31c:	6a c0       	rjmp	.+212    	; 0x3f2 <ProcessDialedDigit+0x150>
		else
		{
			// SD in progress and user entered SF 0 - save SD and exit SD mode
		
			// Save speed dial number
			WriteCurrentSpeedDial(sDS.iSpeedDialIndex);
 31e:	c8 e0       	ldi	r28, 0x08	; 8
 320:	d1 e0       	ldi	r29, 0x01	; 1
 322:	88 81       	ld	r24, Y
 324:	a5 df       	rcall	.-182    	; 0x270 <WriteCurrentSpeedDial>

			// Leave SD mode
			sDS.iSpeedDialIndex = -1;
 326:	8f ef       	ldi	r24, 0xFF	; 255
 328:	88 83       	st	Y, r24
			sDS.iSpeedDialDigitIndex = -1;
 32a:	80 93 07 01 	sts	0x0107, r24

			// Beep to indicate that we done
			GenerateDigit (DIGIT_TUNE_DESC, 800);
 32e:	60 e2       	ldi	r22, 0x20	; 32
 330:	73 e0       	ldi	r23, 0x03	; 3
 332:	84 ef       	ldi	r24, 0xF4	; 244
 334:	f9 de       	rcall	.-526    	; 0x128 <GenerateDigit>
 336:	5d c0       	rjmp	.+186    	; 0x3f2 <ProcessDialedDigit+0x150>
		}
	}
	// Programming SD number
	else if (sDS.iSpeedDialDigitIndex >= 0)
 338:	80 91 07 01 	lds	r24, 0x0107
 33c:	88 23       	and	r24, r24
 33e:	0c f4       	brge	.+2      	; 0x342 <ProcessDialedDigit+0xa0>
 340:	43 c0       	rjmp	.+134    	; 0x3c8 <ProcessDialedDigit+0x126>
	{
		// First digit dialed after selecting SD mode. SD index not set yet
		if (sDS.iSpeedDialIndex < 0)
 342:	80 91 08 01 	lds	r24, 0x0108
 346:	88 23       	and	r24, r24
 348:	dc f4       	brge	.+54     	; 0x380 <ProcessDialedDigit+0xde>
		{
			// SD index supposed to be between 3 and 9
			if ((sDS.iDialedDigit >= 3) && (sDS.iDialedDigit <= 9))
 34a:	80 91 05 01 	lds	r24, 0x0105
 34e:	83 30       	cpi	r24, 0x03	; 3
 350:	6c f0       	brlt	.+26     	; 0x36c <ProcessDialedDigit+0xca>
 352:	80 91 05 01 	lds	r24, 0x0105
 356:	8a 30       	cpi	r24, 0x0A	; 10
 358:	4c f4       	brge	.+18     	; 0x36c <ProcessDialedDigit+0xca>
			{
				sDS.iSpeedDialIndex = sDS.iDialedDigit;
 35a:	80 91 05 01 	lds	r24, 0x0105
 35e:	80 93 08 01 	sts	0x0108, r24
			
				// Beep to indicate that we are in the SD mode
				GenerateDigit (DIGIT_TUNE_ASC, 800);
 362:	60 e2       	ldi	r22, 0x20	; 32
 364:	73 e0       	ldi	r23, 0x03	; 3
 366:	85 ef       	ldi	r24, 0xF5	; 245
 368:	df de       	rcall	.-578    	; 0x128 <GenerateDigit>
 36a:	43 c0       	rjmp	.+134    	; 0x3f2 <ProcessDialedDigit+0x150>
			else
			{
				// Wrong SD index - beep and exit SD mode
			
				// Leave SD mode
				sDS.iSpeedDialIndex = -1;
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	80 93 08 01 	sts	0x0108, r24
				sDS.iSpeedDialDigitIndex = -1;
 372:	80 93 07 01 	sts	0x0107, r24
			
				// Long Beep to indicate error
				GenerateDigit (DIGIT_BEEP, 1000);
 376:	68 ee       	ldi	r22, 0xE8	; 232
 378:	73 e0       	ldi	r23, 0x03	; 3
 37a:	86 ef       	ldi	r24, 0xF6	; 246
 37c:	d5 de       	rcall	.-598    	; 0x128 <GenerateDigit>
 37e:	39 c0       	rjmp	.+114    	; 0x3f2 <ProcessDialedDigit+0x150>
		else
		{
			// Programming SD already in progress

			// Do we have too many digits entered?
			if (sDS.iSpeedDialDigitIndex >= SPEED_DIAL_SIZE)
 380:	80 91 07 01 	lds	r24, 0x0107
 384:	8e 31       	cpi	r24, 0x1E	; 30
 386:	6c f0       	brlt	.+26     	; 0x3a2 <ProcessDialedDigit+0x100>
			{
				// YES - finish and save speed dial number

				// Save speed dial number
				WriteCurrentSpeedDial(sDS.iSpeedDialIndex);
 388:	c8 e0       	ldi	r28, 0x08	; 8
 38a:	d1 e0       	ldi	r29, 0x01	; 1
 38c:	88 81       	ld	r24, Y
 38e:	70 df       	rcall	.-288    	; 0x270 <WriteCurrentSpeedDial>

				// Leave SD mode
				sDS.iSpeedDialIndex = -1;
 390:	8f ef       	ldi	r24, 0xFF	; 255
 392:	88 83       	st	Y, r24
				sDS.iSpeedDialDigitIndex = -1;
 394:	80 93 07 01 	sts	0x0107, r24

				// Beep to indicate that we done
				GenerateDigit (DIGIT_TUNE_DESC, 800);
 398:	60 e2       	ldi	r22, 0x20	; 32
 39a:	73 e0       	ldi	r23, 0x03	; 3
 39c:	84 ef       	ldi	r24, 0xF4	; 244
 39e:	c4 de       	rcall	.-632    	; 0x128 <GenerateDigit>
 3a0:	28 c0       	rjmp	.+80     	; 0x3f2 <ProcessDialedDigit+0x150>
			} 
			else
			{
				// All good - set new digit to the array
				sDS.arSpeedDial[sDS.iSpeedDialDigitIndex] = sDS.iDialedDigit;
 3a2:	c7 e0       	ldi	r28, 0x07	; 7
 3a4:	d1 e0       	ldi	r29, 0x01	; 1
 3a6:	e8 81       	ld	r30, Y
 3a8:	ff 27       	eor	r31, r31
 3aa:	e7 fd       	sbrc	r30, 7
 3ac:	f0 95       	com	r31
 3ae:	80 91 05 01 	lds	r24, 0x0105
 3b2:	eb 5f       	subi	r30, 0xFB	; 251
 3b4:	fe 4f       	sbci	r31, 0xFE	; 254
 3b6:	84 83       	std	Z+4, r24	; 0x04

				// Generic beep - do not gererate DTMF code
				GenerateDigit(DIGIT_BEEP_LOW, DTMF_DURATION_MS);
 3b8:	64 e6       	ldi	r22, 0x64	; 100
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	83 ef       	ldi	r24, 0xF3	; 243
 3be:	b4 de       	rcall	.-664    	; 0x128 <GenerateDigit>

				// Next digit
				sDS.iSpeedDialDigitIndex++;
 3c0:	88 81       	ld	r24, Y
 3c2:	8f 5f       	subi	r24, 0xFF	; 255
 3c4:	88 83       	st	Y, r24
 3c6:	15 c0       	rjmp	.+42     	; 0x3f2 <ProcessDialedDigit+0x150>
			}
		}
	}
	// Call SD stored number
	else if (sDS.bSF_Selected && (sDS.iDialedDigit >= 3) && (sDS.iDialedDigit <= 9))
 3c8:	80 91 06 01 	lds	r24, 0x0106
 3cc:	88 23       	and	r24, r24
 3ce:	61 f0       	breq	.+24     	; 0x3e8 <ProcessDialedDigit+0x146>
 3d0:	80 91 05 01 	lds	r24, 0x0105
 3d4:	83 30       	cpi	r24, 0x03	; 3
 3d6:	44 f0       	brlt	.+16     	; 0x3e8 <ProcessDialedDigit+0x146>
 3d8:	80 91 05 01 	lds	r24, 0x0105
 3dc:	8a 30       	cpi	r24, 0x0A	; 10
 3de:	24 f4       	brge	.+8      	; 0x3e8 <ProcessDialedDigit+0x146>
	{
		// SF 3-9 -> Call speed dial number
		Dial_SpeedDialNumber(sDS.iDialedDigit);
 3e0:	80 91 05 01 	lds	r24, 0x0105
 3e4:	0c df       	rcall	.-488    	; 0x1fe <Dial_SpeedDialNumber>
 3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <ProcessDialedDigit+0x150>
	// Standard (non speed dial functionality)
	else
	{
		// Standard (no speed dial, no special function) mode
		// Generate DTMF code
		GenerateDigit(sDS.iDialedDigit, DTMF_DURATION_MS);  
 3e8:	80 91 05 01 	lds	r24, 0x0105
 3ec:	64 e6       	ldi	r22, 0x64	; 100
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	9b de       	rcall	.-714    	; 0x128 <GenerateDigit>
	}
}
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <main>:
volatile type_DialStatus sDS;	// Global dial status structure


//----- BEGIN MAIN ------------------------------------------------------------
int main(void)
{
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	00 d0       	rcall	.+0      	; 0x3fe <main+0x6>
 3fe:	1f 92       	push	r1
 400:	cd b7       	in	r28, 0x3d	; 61
 402:	de b7       	in	r29, 0x3e	; 62
	// Program clock prescaller to divide +frequency by 1
	// Write CLKPCE 1 and other bits 0	
	CLKPR = (1<<CLKPCE);	
 404:	80 e8       	ldi	r24, 0x80	; 128
 406:	86 bd       	out	0x26, r24	; 38
	// Write prescaler value with CLKPCE = 0
	CLKPR = 0x00;
 408:	16 bc       	out	0x26, r1	; 38

	// Initialize I/O and global variables
	init();
 40a:	25 de       	rcall	.-950    	; 0x56 <init>

	// Turn PWM OFF
	GenerateDigit(DIGIT_OFF, 0); 
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	8f ef       	ldi	r24, 0xFF	; 255
 412:	8a de       	rcall	.-748    	; 0x128 <GenerateDigit>

	// Local dial status variables 
	volatile bool bPrevDialState = true;		// Rotor status
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	89 83       	std	Y+1, r24	; 0x01
	volatile bool bPrevPulseState = false;	// Rotor pulse status
 418:	1a 82       	std	Y+2, r1	; 0x02
	volatile bool bCurPulseState = false;	// Rotor pulse status
 41a:	1b 82       	std	Y+3, r1	; 0x03
			else
			{
				// Rotary dial at the rest position
				// Reset all variables
				bSF_DetectionActive = false;
				sDS.bSF_Selected = false;
 41c:	0f 2e       	mov	r0, r31
 41e:	f6 e0       	ldi	r31, 0x06	; 6
 420:	ef 2e       	mov	r14, r31
 422:	f1 e0       	ldi	r31, 0x01	; 1
 424:	ff 2e       	mov	r15, r31
 426:	f0 2d       	mov	r31, r0
				sDS.iDialedDigit = DIGIT_OFF;
 428:	05 e0       	ldi	r16, 0x05	; 5
 42a:	11 e0       	ldi	r17, 0x01	; 1
 42c:	dd 24       	eor	r13, r13
 42e:	da 94       	dec	r13
		{
			if (!bCurDialState) 
			{
				// Dial just started
				// Enabling special function detection
				bSF_DetectionActive = true;
 430:	cc 24       	eor	r12, r12
 432:	c3 94       	inc	r12


	// Main loop
  	while (1)
	{ 
		bCurDialState = bit_is_set (PINB, PIN_DIAL);
 434:	86 b3       	in	r24, 0x16	; 22
 436:	86 95       	lsr	r24
 438:	81 70       	andi	r24, 0x01	; 1
 43a:	80 93 60 00 	sts	0x0060, r24
		bCurPulseState = bit_is_set (PINB, PIN_PULSE);
 43e:	86 b3       	in	r24, 0x16	; 22
 440:	82 fb       	bst	r24, 2
 442:	88 27       	eor	r24, r24
 444:	80 f9       	bld	r24, 0
 446:	8b 83       	std	Y+3, r24	; 0x03


		if (bPrevDialState != bCurDialState) 
 448:	99 81       	ldd	r25, Y+1	; 0x01
 44a:	80 91 60 00 	lds	r24, 0x0060
 44e:	98 17       	cp	r25, r24
 450:	31 f1       	breq	.+76     	; 0x49e <main+0xa6>
		{
			if (!bCurDialState) 
 452:	80 91 60 00 	lds	r24, 0x0060
 456:	81 11       	cpse	r24, r1
 458:	0a c0       	rjmp	.+20     	; 0x46e <main+0x76>
			{
				// Dial just started
				// Enabling special function detection
				bSF_DetectionActive = true;
 45a:	c0 92 fa 00 	sts	0x00FA, r12
				sDS.bSF_Selected = false;
 45e:	f7 01       	movw	r30, r14
 460:	10 82       	st	Z, r1

				sDS.iDialedDigit = 0;
 462:	f8 01       	movw	r30, r16
 464:	10 82       	st	Z, r1
				SleepMS (50);	// Delay 50ms
 466:	82 e3       	ldi	r24, 0x32	; 50
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	26 de       	rcall	.-948    	; 0xb8 <SleepMS>
 46c:	22 c0       	rjmp	.+68     	; 0x4b2 <main+0xba>
			}
			else 
			{
				// Disabling SF detection (should be already disabled)
				bSF_DetectionActive = false;
 46e:	10 92 fa 00 	sts	0x00FA, r1

				// Check that we detect a valid digit
				if ((sDS.iDialedDigit <= 0) || (sDS.iDialedDigit > 10))
 472:	f8 01       	movw	r30, r16
 474:	80 81       	ld	r24, Z
 476:	18 16       	cp	r1, r24
 478:	1c f4       	brge	.+6      	; 0x480 <main+0x88>
 47a:	80 81       	ld	r24, Z
 47c:	8b 30       	cpi	r24, 0x0B	; 11
 47e:	34 f0       	brlt	.+12     	; 0x48c <main+0x94>
				{
					// Should never happen - no pulses detected OR count more than 10 pulses
					sDS.iDialedDigit = DIGIT_OFF;					
 480:	f8 01       	movw	r30, r16
 482:	d0 82       	st	Z, r13

					// Do nothing
					SleepMS (50);	// Delay 50ms
 484:	82 e3       	ldi	r24, 0x32	; 50
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	17 de       	rcall	.-978    	; 0xb8 <SleepMS>
 48a:	06 c0       	rjmp	.+12     	; 0x498 <main+0xa0>
				}
				else 
				{
					// Got a valid digit - process it			
					if (sDS.iDialedDigit == 10)
 48c:	f8 01       	movw	r30, r16
 48e:	80 81       	ld	r24, Z
 490:	8a 30       	cpi	r24, 0x0A	; 10
 492:	09 f4       	brne	.+2      	; 0x496 <main+0x9e>
					{
						// 10 pulses => 0
						sDS.iDialedDigit = 0;
 494:	10 82       	st	Z, r1
					}

					ProcessDialedDigit();
 496:	05 df       	rcall	.-502    	; 0x2a2 <ProcessDialedDigit>
				}
					
				sDS.bSF_Selected = false;	// Reset SF flag
 498:	f7 01       	movw	r30, r14
 49a:	10 82       	st	Z, r1
 49c:	0a c0       	rjmp	.+20     	; 0x4b2 <main+0xba>
			}	
		} 
		else 
		{
			if (!bCurDialState) 
 49e:	80 91 60 00 	lds	r24, 0x0060
 4a2:	88 23       	and	r24, r24
 4a4:	31 f0       	breq	.+12     	; 0x4b2 <main+0xba>
			}
			else
			{
				// Rotary dial at the rest position
				// Reset all variables
				bSF_DetectionActive = false;
 4a6:	10 92 fa 00 	sts	0x00FA, r1
				sDS.bSF_Selected = false;
 4aa:	f7 01       	movw	r30, r14
 4ac:	10 82       	st	Z, r1
				sDS.iDialedDigit = DIGIT_OFF;
 4ae:	f8 01       	movw	r30, r16
 4b0:	d0 82       	st	Z, r13
			}
		}

		bPrevDialState = bCurDialState;
 4b2:	80 91 60 00 	lds	r24, 0x0060
 4b6:	89 83       	std	Y+1, r24	; 0x01
		bPrevPulseState = bCurPulseState;
 4b8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ba:	8a 83       	std	Y+2, r24	; 0x02

		// Don't power down if special function detection is active		
		if (bSF_DetectionActive)
 4bc:	80 91 fa 00 	lds	r24, 0x00FA
 4c0:	88 23       	and	r24, r24
 4c2:	09 f1       	breq	.+66     	; 0x506 <main+0x10e>
		{
			// SF detection in progress - we need timer to run (IDLE mode)
			set_sleep_mode(SLEEP_MODE_IDLE);		
 4c4:	85 b7       	in	r24, 0x35	; 53
 4c6:	87 7e       	andi	r24, 0xE7	; 231
 4c8:	85 bf       	out	0x35, r24	; 53
			sleep_mode();
 4ca:	85 b7       	in	r24, 0x35	; 53
 4cc:	80 62       	ori	r24, 0x20	; 32
 4ce:	85 bf       	out	0x35, r24	; 53
 4d0:	88 95       	sleep
 4d2:	85 b7       	in	r24, 0x35	; 53
 4d4:	8f 7d       	andi	r24, 0xDF	; 223
 4d6:	85 bf       	out	0x35, r24	; 53

			// Special function mode detected?
			if (ulDelayCounter >= SF_DELAY_MS * T0_OVERFLOW_PER_MS)
 4d8:	80 91 fb 00 	lds	r24, 0x00FB
 4dc:	90 91 fc 00 	lds	r25, 0x00FC
 4e0:	a0 91 fd 00 	lds	r26, 0x00FD
 4e4:	b0 91 fe 00 	lds	r27, 0x00FE
 4e8:	80 33       	cpi	r24, 0x30	; 48
 4ea:	95 47       	sbci	r25, 0x75	; 117
 4ec:	a1 05       	cpc	r26, r1
 4ee:	b1 05       	cpc	r27, r1
 4f0:	08 f4       	brcc	.+2      	; 0x4f4 <main+0xfc>
 4f2:	a0 cf       	rjmp	.-192    	; 0x434 <main+0x3c>
			{
				// SF mode detected
				sDS.bSF_Selected = true;
 4f4:	f7 01       	movw	r30, r14
 4f6:	c0 82       	st	Z, r12
				bSF_DetectionActive = false;
 4f8:	10 92 fa 00 	sts	0x00FA, r1

				// Indicate that we entered SF mode wit short beep
				GenerateDigit (DIGIT_BEEP, 200);
 4fc:	68 ec       	ldi	r22, 0xC8	; 200
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	86 ef       	ldi	r24, 0xF6	; 246
 502:	12 de       	rcall	.-988    	; 0x128 <GenerateDigit>
 504:	97 cf       	rjmp	.-210    	; 0x434 <main+0x3c>
			}
		}
		else
		{
			// Don't need timer - sleep to power down mode
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 506:	85 b7       	in	r24, 0x35	; 53
 508:	87 7e       	andi	r24, 0xE7	; 231
 50a:	80 61       	ori	r24, 0x10	; 16
 50c:	85 bf       	out	0x35, r24	; 53
			sleep_mode();
 50e:	85 b7       	in	r24, 0x35	; 53
 510:	80 62       	ori	r24, 0x20	; 32
 512:	85 bf       	out	0x35, r24	; 53
 514:	88 95       	sleep
 516:	85 b7       	in	r24, 0x35	; 53
 518:	8f 7d       	andi	r24, 0xDF	; 223
 51a:	85 bf       	out	0x35, r24	; 53
 51c:	8b cf       	rjmp	.-234    	; 0x434 <main+0x3c>

0000051e <__vector_5>:
}


// Timer overflow interrupt service routine
TIMER_INTERRUPT_HANDLER(SIG_OVERFLOW0)
{ 
 51e:	1f 92       	push	r1
 520:	0f 92       	push	r0
 522:	0f b6       	in	r0, 0x3f	; 63
 524:	0f 92       	push	r0
 526:	11 24       	eor	r1, r1
 528:	2f 93       	push	r18
 52a:	3f 93       	push	r19
 52c:	8f 93       	push	r24
 52e:	9f 93       	push	r25
 530:	af 93       	push	r26
 532:	bf 93       	push	r27
 534:	ef 93       	push	r30
 536:	ff 93       	push	r31
	unsigned char ucSinA;
	unsigned char ucSinB;

	// A component (high frequency) is always used
	// move Pointer about step width ahead
	iCurSinValA += cSWa;      
 538:	20 91 04 01 	lds	r18, 0x0104
 53c:	80 91 01 01 	lds	r24, 0x0101
 540:	90 91 02 01 	lds	r25, 0x0102
 544:	82 0f       	add	r24, r18
 546:	91 1d       	adc	r25, r1
 548:	90 93 02 01 	sts	0x0102, r25
 54c:	80 93 01 01 	sts	0x0101, r24
	// normalize Temp-Pointer 
	unsigned int i_TmpSinValA = (char)(((iCurSinValA + 4) >> 3) & (0x007F)); 
 550:	e0 91 01 01 	lds	r30, 0x0101
 554:	f0 91 02 01 	lds	r31, 0x0102
 558:	34 96       	adiw	r30, 0x04	; 4
 55a:	f6 95       	lsr	r31
 55c:	e7 95       	ror	r30
 55e:	f6 95       	lsr	r31
 560:	e7 95       	ror	r30
 562:	f6 95       	lsr	r31
 564:	e7 95       	ror	r30
 566:	ef 77       	andi	r30, 0x7F	; 127
 568:	ff 27       	eor	r31, r31
	ucSinA = auc_SinParam[i_TmpSinValA];
 56a:	e7 58       	subi	r30, 0x87	; 135
 56c:	ff 4f       	sbci	r31, 0xFF	; 255
 56e:	20 81       	ld	r18, Z


	//	B component (low frequency) is optional
	if (cSWb > 0)
 570:	80 91 03 01 	lds	r24, 0x0103
 574:	88 23       	and	r24, r24
 576:	e9 f0       	breq	.+58     	; 0x5b2 <__vector_5+0x94>
	{
		// move Pointer about step width ahead
		iCurSinValB += cSWb;	
 578:	30 91 03 01 	lds	r19, 0x0103
 57c:	80 91 ff 00 	lds	r24, 0x00FF
 580:	90 91 00 01 	lds	r25, 0x0100
 584:	83 0f       	add	r24, r19
 586:	91 1d       	adc	r25, r1
 588:	90 93 00 01 	sts	0x0100, r25
 58c:	80 93 ff 00 	sts	0x00FF, r24
		// normalize Temp-Pointer	
		unsigned int i_TmpSinValB = (char)(((iCurSinValB + 4) >> 3) & (0x007F));		
 590:	e0 91 ff 00 	lds	r30, 0x00FF
 594:	f0 91 00 01 	lds	r31, 0x0100
 598:	34 96       	adiw	r30, 0x04	; 4
 59a:	f6 95       	lsr	r31
 59c:	e7 95       	ror	r30
 59e:	f6 95       	lsr	r31
 5a0:	e7 95       	ror	r30
 5a2:	f6 95       	lsr	r31
 5a4:	e7 95       	ror	r30
 5a6:	ef 77       	andi	r30, 0x7F	; 127
 5a8:	ff 27       	eor	r31, r31
		ucSinB = auc_SinParam[i_TmpSinValB];
 5aa:	e7 58       	subi	r30, 0x87	; 135
 5ac:	ff 4f       	sbci	r31, 0xFF	; 255
 5ae:	80 81       	ld	r24, Z
 5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <__vector_5+0x96>
	}
	else
	{
		ucSinB = 0;
 5b2:	80 e0       	ldi	r24, 0x00	; 0
	}

	// calculate PWM value: high frequency value + 3/4 low frequency value
	OCR0A = (ucSinA + (ucSinB - (ucSinB >> 2)));
 5b4:	28 0f       	add	r18, r24
 5b6:	98 2f       	mov	r25, r24
 5b8:	96 95       	lsr	r25
 5ba:	96 95       	lsr	r25
 5bc:	82 2f       	mov	r24, r18
 5be:	89 1b       	sub	r24, r25
 5c0:	89 bd       	out	0x29, r24	; 41

	ulDelayCounter++;
 5c2:	80 91 fb 00 	lds	r24, 0x00FB
 5c6:	90 91 fc 00 	lds	r25, 0x00FC
 5ca:	a0 91 fd 00 	lds	r26, 0x00FD
 5ce:	b0 91 fe 00 	lds	r27, 0x00FE
 5d2:	01 96       	adiw	r24, 0x01	; 1
 5d4:	a1 1d       	adc	r26, r1
 5d6:	b1 1d       	adc	r27, r1
 5d8:	80 93 fb 00 	sts	0x00FB, r24
 5dc:	90 93 fc 00 	sts	0x00FC, r25
 5e0:	a0 93 fd 00 	sts	0x00FD, r26
 5e4:	b0 93 fe 00 	sts	0x00FE, r27
}
 5e8:	ff 91       	pop	r31
 5ea:	ef 91       	pop	r30
 5ec:	bf 91       	pop	r27
 5ee:	af 91       	pop	r26
 5f0:	9f 91       	pop	r25
 5f2:	8f 91       	pop	r24
 5f4:	3f 91       	pop	r19
 5f6:	2f 91       	pop	r18
 5f8:	0f 90       	pop	r0
 5fa:	0f be       	out	0x3f, r0	; 63
 5fc:	0f 90       	pop	r0
 5fe:	1f 90       	pop	r1
 600:	18 95       	reti

00000602 <__vector_1>:


// [AW] Handler for external interrupt on INT0 (PB2, pin 7)
ISR(INT0_vect)
{
 602:	1f 92       	push	r1
 604:	0f 92       	push	r0
 606:	0f b6       	in	r0, 0x3f	; 63
 608:	0f 92       	push	r0
 60a:	11 24       	eor	r1, r1
 60c:	8f 93       	push	r24
 60e:	ef 93       	push	r30
 610:	ff 93       	push	r31
	if (!bCurDialState)
 612:	80 91 60 00 	lds	r24, 0x0060
 616:	81 11       	cpse	r24, r1
 618:	07 c0       	rjmp	.+14     	; 0x628 <__vector_1+0x26>
	{
	    // Disabling SF detection
		bSF_DetectionActive = false;
 61a:	10 92 fa 00 	sts	0x00FA, r1

		// A pulse just started
		sDS.iDialedDigit++;
 61e:	e5 e0       	ldi	r30, 0x05	; 5
 620:	f1 e0       	ldi	r31, 0x01	; 1
 622:	80 81       	ld	r24, Z
 624:	8f 5f       	subi	r24, 0xFF	; 255
 626:	80 83       	st	Z, r24
	}
}
 628:	ff 91       	pop	r31
 62a:	ef 91       	pop	r30
 62c:	8f 91       	pop	r24
 62e:	0f 90       	pop	r0
 630:	0f be       	out	0x3f, r0	; 63
 632:	0f 90       	pop	r0
 634:	1f 90       	pop	r1
 636:	18 95       	reti

00000638 <__vector_2>:

// [AW] Interrupt handlers updated to new code convention
// Interrupt initiated by pin change on any enabled pin
ISR(PCINT0_vect)
{
 638:	1f 92       	push	r1
 63a:	0f 92       	push	r0
 63c:	0f b6       	in	r0, 0x3f	; 63
 63e:	0f 92       	push	r0
 640:	11 24       	eor	r1, r1
 642:	8f 93       	push	r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 644:	85 e8       	ldi	r24, 0x85	; 133
 646:	8a 95       	dec	r24
 648:	f1 f7       	brne	.-4      	; 0x646 <__vector_2+0xe>
 64a:	00 00       	nop
	// Do nothing, just wake up MCU
	_delay_us(100);
}
 64c:	8f 91       	pop	r24
 64e:	0f 90       	pop	r0
 650:	0f be       	out	0x3f, r0	; 63
 652:	0f 90       	pop	r0
 654:	1f 90       	pop	r1
 656:	18 95       	reti

00000658 <__vector_default>:

// [AW] Handler for any unspecified 'bad' interrupts
ISR(BADISR_vect)
{
 658:	1f 92       	push	r1
 65a:	0f 92       	push	r0
 65c:	0f b6       	in	r0, 0x3f	; 63
 65e:	0f 92       	push	r0
 660:	11 24       	eor	r1, r1
 662:	8f 93       	push	r24
 664:	85 e8       	ldi	r24, 0x85	; 133
 666:	8a 95       	dec	r24
 668:	f1 f7       	brne	.-4      	; 0x666 <__vector_default+0xe>
 66a:	00 00       	nop
	// Do nothing, just wake up MCU
	_delay_us(100);
 66c:	8f 91       	pop	r24
 66e:	0f 90       	pop	r0
 670:	0f be       	out	0x3f, r0	; 63
 672:	0f 90       	pop	r0
 674:	1f 90       	pop	r1
 676:	18 95       	reti

00000678 <__udivmodhi4>:
 678:	aa 1b       	sub	r26, r26
 67a:	bb 1b       	sub	r27, r27
 67c:	51 e1       	ldi	r21, 0x11	; 17
 67e:	07 c0       	rjmp	.+14     	; 0x68e <__udivmodhi4_ep>

00000680 <__udivmodhi4_loop>:
 680:	aa 1f       	adc	r26, r26
 682:	bb 1f       	adc	r27, r27
 684:	a6 17       	cp	r26, r22
 686:	b7 07       	cpc	r27, r23
 688:	10 f0       	brcs	.+4      	; 0x68e <__udivmodhi4_ep>
 68a:	a6 1b       	sub	r26, r22
 68c:	b7 0b       	sbc	r27, r23

0000068e <__udivmodhi4_ep>:
 68e:	88 1f       	adc	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	5a 95       	dec	r21
 694:	a9 f7       	brne	.-22     	; 0x680 <__udivmodhi4_loop>
 696:	80 95       	com	r24
 698:	90 95       	com	r25
 69a:	bc 01       	movw	r22, r24
 69c:	cd 01       	movw	r24, r26
 69e:	08 95       	ret

000006a0 <__eerd_block_tn85>:
 6a0:	dc 01       	movw	r26, r24
 6a2:	cb 01       	movw	r24, r22

000006a4 <__eerd_blraw_tn85>:
 6a4:	fc 01       	movw	r30, r24
 6a6:	e1 99       	sbic	0x1c, 1	; 28
 6a8:	fe cf       	rjmp	.-4      	; 0x6a6 <__eerd_blraw_tn85+0x2>
 6aa:	06 c0       	rjmp	.+12     	; 0x6b8 <__eerd_blraw_tn85+0x14>
 6ac:	ff bb       	out	0x1f, r31	; 31
 6ae:	ee bb       	out	0x1e, r30	; 30
 6b0:	e0 9a       	sbi	0x1c, 0	; 28
 6b2:	31 96       	adiw	r30, 0x01	; 1
 6b4:	0d b2       	in	r0, 0x1d	; 29
 6b6:	0d 92       	st	X+, r0
 6b8:	41 50       	subi	r20, 0x01	; 1
 6ba:	50 40       	sbci	r21, 0x00	; 0
 6bc:	b8 f7       	brcc	.-18     	; 0x6ac <__eerd_blraw_tn85+0x8>
 6be:	08 95       	ret

000006c0 <__eeupd_block_tn85>:
 6c0:	dc 01       	movw	r26, r24
 6c2:	a4 0f       	add	r26, r20
 6c4:	b5 1f       	adc	r27, r21
 6c6:	41 50       	subi	r20, 0x01	; 1
 6c8:	50 40       	sbci	r21, 0x00	; 0
 6ca:	40 f0       	brcs	.+16     	; 0x6dc <__eeupd_block_tn85+0x1c>
 6cc:	cb 01       	movw	r24, r22
 6ce:	84 0f       	add	r24, r20
 6d0:	95 1f       	adc	r25, r21
 6d2:	2e 91       	ld	r18, -X
 6d4:	05 d0       	rcall	.+10     	; 0x6e0 <__eeupd_r18_tn85>
 6d6:	41 50       	subi	r20, 0x01	; 1
 6d8:	50 40       	sbci	r21, 0x00	; 0
 6da:	d8 f7       	brcc	.-10     	; 0x6d2 <__eeupd_block_tn85+0x12>
 6dc:	08 95       	ret

000006de <__eeupd_byte_tn85>:
 6de:	26 2f       	mov	r18, r22

000006e0 <__eeupd_r18_tn85>:
 6e0:	e1 99       	sbic	0x1c, 1	; 28
 6e2:	fe cf       	rjmp	.-4      	; 0x6e0 <__eeupd_r18_tn85>
 6e4:	9f bb       	out	0x1f, r25	; 31
 6e6:	8e bb       	out	0x1e, r24	; 30
 6e8:	e0 9a       	sbi	0x1c, 0	; 28
 6ea:	01 97       	sbiw	r24, 0x01	; 1
 6ec:	0d b2       	in	r0, 0x1d	; 29
 6ee:	02 16       	cp	r0, r18
 6f0:	39 f0       	breq	.+14     	; 0x700 <__eeupd_r18_tn85+0x20>
 6f2:	1c ba       	out	0x1c, r1	; 28
 6f4:	2d bb       	out	0x1d, r18	; 29
 6f6:	0f b6       	in	r0, 0x3f	; 63
 6f8:	f8 94       	cli
 6fa:	e2 9a       	sbi	0x1c, 2	; 28
 6fc:	e1 9a       	sbi	0x1c, 1	; 28
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	08 95       	ret

00000702 <_exit>:
 702:	f8 94       	cli

00000704 <__stop_program>:
 704:	ff cf       	rjmp	.-2      	; 0x704 <__stop_program>
